openapi: 3.0.0

info:
  title: AI Agent API
  version: "1.0"
  description: API for interacting with AI models and managing settings

servers:
  - url: /api/v1
    description: Base API path

paths:
  /databases:
    get:
      summary: List all databases
      description: Retrieve a list of all databases and their tables
      operationId: listDatabases
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully retrieved database list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Database"
    post:
      summary: Create a new database
      description: Create a new database
      operationId: createDatabase
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DatabaseConnectInfo"
      responses:
        "201":
          description: Database created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Database"

  /databases/test-connection:
    post:
      summary: Test database connection
      description: Test a database connection
      operationId: testDatabaseConnection
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TestDatabaseConnectionPayload"
      responses:
        "200":
          description: Successfully tested database connection
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestDatabaseConnectionResult"

  /databases/{ID}:
    parameters:
      - name: ID
        in: path
        required: true
        schema:
          type: integer
          format: int32
    get:
      summary: Get database details
      description: Retrieve details of a specific database
      operationId: getDatabase
      security:
        - BearerAuth:
            - x.OwnDatabase(c, x.GetOrgID(c), id)
      responses:
        "200":
          description: Successfully retrieved database
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Database"
    put:
      summary: Update database
      description: Update a specific database
      operationId: updateDatabase
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DatabaseConnectInfo"
      responses:
        "200":
          description: Database updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Database"
    delete:
      summary: Delete database
      description: Delete a specific database
      operationId: deleteDatabase
      security:
        - BearerAuth: []
      responses:
        "204":
          description: Database deleted successfully

  /databases/{ID}/query:
    post:
      parameters:
        - name: ID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      summary: Query database
      description: Query a specific database
      operationId: queryDatabase
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QueryRequest"
      responses:
        "200":
          description: Query executed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResponse"

  /databases/{ID}/ddl-progress:
    get:
      parameters:
        - name: ID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      summary: Get DDL progress
      description: Get the progress of a DDL operation
      operationId: getDDLProgress
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully retrieved DDL progress
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DDLProgress"

  /databases/{ID}/ddl-progress/{ddlID}/cancel:
    post:
      operationId: cancelDDLProgress
      summary: Cancel DDL progress
      parameters:
        - name: ID
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: ddlID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully canceled DDL operation

  /test-cluster-connection:
    post:
      summary: Test cluster connection
      description: Test a cluster connection
      operationId: testClusterConnection
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TestClusterConnectionPayload"
      responses:
        "200":
          description: Successfully tested cluster connection
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestClusterConnectionResult"

  /cluster-versions:
    get:
      summary: List all cluster versions
      description: Retrieve a list of all cluster versions
      operationId: listClusterVersions
      responses:
        "200":
          description: Successfully retrieved cluster version list
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      security: []

  /clusters:
    get:
      summary: List all clusters
      description: Retrieve a list of all database clusters
      operationId: listClusters
      responses:
        "200":
          description: Successfully retrieved cluster list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Cluster"
      security:
        - BearerAuth: []

    post:
      summary: Create a new cluster
      description: Create a new database cluster
      operationId: createCluster
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClusterCreate"
      responses:
        "201":
          description: Cluster created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cluster"

      security:
        - BearerAuth: []

  /clusters/{ID}:
    parameters:
      - name: ID
        in: path
        required: true
        schema:
          type: integer
          format: int32
    get:
      summary: Get cluster details
      description: Retrieve details of a specific cluster
      operationId: getCluster
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully retrieved cluster
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cluster"

    put:
      summary: Update cluster
      description: Update a specific cluster
      operationId: updateCluster
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateClusterRequest"
      responses:
        "200":
          description: Cluster updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cluster"
      security:
        - BearerAuth: []

    delete:
      summary: Delete cluster
      description: Delete a specific cluster
      operationId: deleteCluster
      security:
        - BearerAuth: []
      parameters:
        - name: cascade
          in: query
          required: false
          schema:
            type: boolean
      responses:
        "204":
          description: Cluster deleted successfully

  /clusters/{ID}/risectl:
    post:
      summary: Run risectl command
      description: Run a risectl command on a specific cluster
      operationId: runRisectlCommand
      security:
        - BearerAuth: []
      parameters:
        - name: ID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RisectlCommand"
      responses:
        "200":
          description: Successfully ran risectl command
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RisectlCommandResult"

  /clusters/{ID}/snapshots:
    parameters:
      - name: ID
        in: path
        required: true
        schema:
          type: integer
          format: int32
    get:
      summary: List cluster snapshots
      description: Retrieve a list of all snapshots for a specific cluster
      operationId: listClusterSnapshots
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully retrieved snapshot list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Snapshot"
    post:
      summary: Create a new snapshot
      description: Create a new metadata snapshot for a specific cluster
      operationId: createClusterSnapshot
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SnapshotCreate"
      responses:
        "201":
          description: Snapshot created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Snapshot"

  /clusters/{ID}/snapshots/{snapshotId}:
    parameters:
      - name: ID
        in: path
        required: true
        schema:
          type: integer
          format: int32
      - name: snapshotId
        in: path
        required: true
        schema:
          type: integer
          format: int64
    delete:
      summary: Delete snapshot
      description: Delete a specific snapshot
      operationId: deleteClusterSnapshot
      security:
        - BearerAuth: []
      responses:
        "204":
          description: Snapshot deleted successfully
    post:
      summary: Restore snapshot
      description: Restore cluster metadata from a specific snapshot
      operationId: restoreClusterSnapshot
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Snapshot restored successfully

  /clusters/{ID}/auto-backup-config:
    parameters:
      - name: ID
        in: path
        required: true
        schema:
          type: integer
          format: int32
    get:
      summary: Get snapshot configuration
      description: Get automatic snapshot configuration for a cluster
      operationId: getClusterAutoBackupConfig
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully retrieved snapshot configuration
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AutoBackupConfig"
    put:
      summary: Update snapshot configuration
      description: Update automatic snapshot configuration for a cluster
      operationId: updateClusterAutoBackupConfig
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AutoBackupConfig"
      responses:
        "200":
          description: Snapshot configuration updated successfully

  /clusters/{ID}/diagnostics:
    parameters:
      - name: ID
        in: path
        required: true
        schema:
          type: integer
          format: int32
    post:
      summary: Create diagnostic data
      description: Create diagnostic data for a specific cluster
      operationId: createClusterDiagnostic
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DiagnosticData"
      responses:
        "200":
          description: Successfully created diagnostic data

    get:
      summary: List diagnostic data
      description: Retrieve diagnostic data for a specific cluster with optional date range filtering
      operationId: listClusterDiagnostics
      security:
        - BearerAuth: []
      parameters:
        - name: from
          in: query
          required: false
          schema:
            type: string
            format: date-time
          description: Start date for filtering diagnostic data
        - name: to
          in: query
          required: false
          schema:
            type: string
            format: date-time
          description: End date for filtering diagnostic data
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - name: perPage
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of items per page
      responses:
        "200":
          description: Successfully retrieved diagnostic data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DiagnosticData"

  /clusters/{ID}/diagnostics/{diagnosticId}:
    parameters:
      - name: ID
        in: path
        required: true
        schema:
          type: integer
          format: int32
      - name: diagnosticId
        in: path
        required: true
        schema:
          type: integer
          format: int32
    get:
      summary: Get diagnostic data
      description: Get diagnostic data for a specific cluster
      operationId: getClusterDiagnostic
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully retrieved diagnostic data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiagnosticData"

  /clusters/{ID}/diagnostics/config:
    parameters:
      - name: ID
        in: path
        required: true
        schema:
          type: integer
          format: int32
    get:
      summary: Get diagnostic configuration
      description: Get diagnostic data collection configuration for a cluster
      operationId: getClusterAutoDiagnosticConfig
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully retrieved diagnostic configuration
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AutoDiagnosticConfig"
    put:
      summary: Update diagnostic configuration
      description: Update diagnostic data collection configuration for a cluster
      operationId: updateClusterAutoDiagnosticConfig
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AutoDiagnosticConfig"
      responses:
        "200":
          description: Diagnostic configuration updated successfully

  /auth/sign-in:
    post:
      summary: Sign in user
      description: Authenticate user and return access token
      operationId: signIn
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignInRequest"
      responses:
        "200":
          description: Successfully authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Credentials"
        "401":
          description: Invalid credentials
      security: []

  /auth/refresh:
    post:
      summary: Refresh access token
      description: Get a new access token using a refresh token
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshTokenRequest"
      responses:
        "200":
          description: Successfully refreshed token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Credentials"
        "401":
          description: Invalid or expired refresh token
      security: []

  /auth/sign-out:
    post:
      summary: Sign out user
      description: Sign out user and invalidate all tokens
      operationId: signOut
      responses:
        "200":
          description: Successfully signed out
      security:
        - BearerAuth: []

  /metrics-stores/{ID}:
    get:
      summary: Get a metrics store
      description: Get a metrics store by ID
      operationId: getMetricsStore
      security:
        - BearerAuth: []
      parameters:
        - name: ID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Successfully retrieved metrics store
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetricsStore"
    put:
      summary: Update a metrics store
      description: Update a metrics store
      operationId: updateMetricsStore
      parameters:
        - name: ID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MetricsStore"
      responses:
        "200":
          description: Successfully updated metrics store
    
    delete:
      summary: Delete a metrics store
      description: Delete a metrics store
      operationId: deleteMetricsStore
      parameters:
        - name: ID
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: force
          in: query
          required: true
          description: force delete the metrics store even if it is in use
          schema:
            type: boolean
            default: false
      security:
        - BearerAuth: []
      responses:
        "204":
          description: Successfully deleted metrics store

  /metrics-stores:
    post:
      summary: Create a new metrics store
      description: Create a new metrics store
      operationId: createMetricsStore
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MetricsStoreCreate"
      responses:
        "201":
          description: Successfully created metrics store
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetricsStore"
    get:
      summary: Get all metrics stores
      description: Get all metrics stores
      operationId: listMetricsStores
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully retrieved metrics stores
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MetricsStore"

  /tasks:
    get:
      summary: Get all tasks
      description: Get all tasks
      operationId: listTasks
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully retrieved tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
  
  /events:
    get:
      summary: Get all events
      description: Get all events
      operationId: listEvents
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully retrieved events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"

  /metrics/{clusterID}/materialized-view-throughput:
    get:
      summary: Get materialized view throughput
      description: Get the throughput of materialized views
      operationId: getMaterializedViewThroughput
      security:
        - BearerAuth: []
      parameters:
        - name: clusterID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Successfully retrieved materialized view throughput
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetricMatrix"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    DatabaseConnectInfo:
      type: object
      required:
        - name
        - clusterID
        - username
        - database
      properties:
        name:
          type: string
          description: Name of the database
        clusterID:
          type: integer
          format: int32
          description: ID of the cluster this database belongs to
        username:
          type: string
          description: Database username
        password:
          type: string
          description: Database password (optional)
          format: password
        database:
          type: string
          description: Database name

    Database:
      type: object
      required:
        - ID
        - name
        - clusterID
        - organizationID
        - username
        - database
        - createdAt
        - updatedAt
      properties:
        ID:
          type: integer
          format: int32
          description: Unique identifier of the database
        name:
          type: string
          description: Name of the database
        clusterID:
          type: integer
          format: int32
          description: ID of the cluster this database belongs to
        organizationID:
          type: integer
          format: int32
          description: ID of the organization this database belongs to
        username:
          type: string
          description: Database username
        database:
          type: string
          description: Database name
        password:
          type: string
          format: password
          description: Database password (optional)
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
        schemas:
          type: array
          items:
            $ref: "#/components/schemas/Schema"
          description: List of schemas in the database

    Column:
      type: object
      required:
        - name
        - type
        - isPrimaryKey
        - isHidden
      properties:
        name:
          type: string
          description: Name of the column
        type:
          type: string
          description: Data type of the column
        isPrimaryKey:
          type: boolean
          description: Whether the column is a primary key
        isHidden:
          type: boolean
          description: Whether the column is hidden

    Schema:
      type: object
      required:
        - name
        - relations
      properties:
        name:
          type: string
          description: Name of the schema
        relations:
          type: array
          items:
            $ref: "#/components/schemas/Relation"

    Relation:
      type: object
      required:
        - ID
        - name
        - type
        - columns
        - dependencies
      properties:
        ID:
          type: integer
          format: int32
          description: Unique identifier of the table
        name:
          type: string
          description: Name of the table
        type:
          type: string
          enum: ["table", "source", "sink", "materializedView", "system table"]
          description: Type of the relation
        columns:
          type: array
          items:
            $ref: "#/components/schemas/Column"
          description: List of columns in the table
        dependencies:
          type: array
          items:
            type: integer
            format: int32
            description: ID of the relation this relation depends on

    ClusterCreate:
      type: object
      required:
        - name
        - host
        - sqlPort
        - metaPort
        - httpPort
        - version
      properties:
        name:
          type: string
          description: Name of the cluster
        host:
          type: string
          description: Cluster host address
        sqlPort:
          type: integer
          format: int32
          description: SQL connection port
        metaPort:
          type: integer
          format: int32
          description: Metadata node port
        httpPort:
          type: integer
          format: int32
          description: HTTP port
        version:
          type: string
          description: Version of the cluster
        metricsStoreID:
          type: integer
          format: int32
          description: ID of the metrics store this cluster belongs to

    Cluster:
      type: object
      required:
        - ID
        - organizationID
        - name
        - host
        - sqlPort
        - metaPort
        - httpPort
        - version
        - createdAt
        - updatedAt
      properties:
        ID:
          type: integer
          format: int32
        organizationID:
          type: integer
          format: int32
        name:
          type: string
        host:
          type: string
        sqlPort:
          type: integer
          format: int32
        metaPort:
          type: integer
          format: int32
        httpPort:
          type: integer
          format: int32
        version:
          type: string
        metricsStoreID:
          type: integer
          format: int32
          description: ID of the metrics store this cluster belongs to
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    UpdateClusterRequest:
      type: object
      required:
        - name
        - host
        - sqlPort
        - metaPort
        - httpPort
        - version
      properties:
        name:
          type: string
        host:
          type: string
        sqlPort:
          type: integer
          format: int32
        metaPort:
          type: integer
          format: int32
        httpPort:
          type: integer
          format: int32
        version:
          type: string
        metricsStoreID:
          type: integer
          format: int32
          description: ID of the metrics store this cluster belongs to

    SnapshotCreate:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Name of the snapshot

    Snapshot:
      type: object
      required:
        - ID
        - ClusterID
        - name
        - createdAt
      properties:
        ID:
          type: integer
          format: int64
          description: Unique identifier of the snapshot
        ClusterID:
          type: integer
          format: int32
          description: ID of the cluster this snapshot belongs to
        name:
          type: string
          description: Name of the snapshot
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp of the snapshot

    AutoBackupConfig:
      type: object
      required:
        - enabled
        - cronExpression
        - retentionDuration
      properties:
        enabled:
          type: boolean
          description: Whether automatic snapshots are enabled
        cronExpression:
          type: string
          description: Cron expression for automatic snapshots (e.g., '0 0 * * *')
        retentionDuration:
          type: string
          description: How long to retain automatic snapshots (e.g., '1d', '7d', '14d', '30d', '90d')


    AutoDiagnosticConfig:
      type: object
      required:
        - enabled
        - cronExpression
        - retentionDuration
      properties:
        enabled:
          type: boolean
          description: Whether to enable automatic diagnostics
        cronExpression:
          type: string
          description: Cron expression for diagnostic data collection (e.g., '0 0 * * *')
        retentionDuration:
          type: string
          description: How long to retain diagnostic data (e.g., '1d', '7d', '14d', '30d', '90d')

    DiagnosticData:
      type: object
      required:
        - ID
        - createdAt
        - content
      properties:
        ID:
          type: integer
          format: int32
          description: Unique identifier of the diagnostic entry
        createdAt:
          type: string
          format: date-time
          description: When the diagnostic data was collected
        content:
          type: string
          description: Raw diagnostic data message containing system metrics and information

    SignInRequest:
      type: object
      required:
        - name
        - password
      properties:
        name:
          type: string
          description: User's name
        password:
          type: string
          format: password
          description: User's password

    Credentials:
      type: object
      required:
        - accessToken
        - refreshToken
        - tokenType
      properties:
        accessToken:
          type: string
          description: JWT access token
        refreshToken:
          type: string
          description: JWT refresh token for obtaining new access tokens
        tokenType:
          type: string
          enum: ["Bearer"]
          description: Token type

    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          description: Refresh token obtained from sign-in

    User:
      type: object
      required:
        - ID
        - name
        - organizationID
        - createdAt
        - updatedAt
      properties:
        ID:
          type: integer
          format: int32
          description: Unique identifier of the user
        name:
          type: string
          description: User's name
        organizationID:
          type: integer
          format: int32
          description: ID of the organization this user belongs to
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp

    QueryRequest:
      type: object
      required:
        - query
      properties:
        query:
          type: string
          description: SQL query to execute
        backgroundDDL:
          type: boolean
          description: Whether to execute the query in background DDL mode
          default: false

    QueryResponse:
      type: object
      required:
        - columns
        - rows
        - rowsAffected
      properties:
        columns:
          type: array
          items:
            $ref: "#/components/schemas/Column"
        rows:
          type: array
          items:
            type: object
            description: Row of the query result, the key is the column name and the value is the column value
        rowsAffected:
          type: integer
          format: int32
          description: Number of rows affected by the query
        error:
          type: string
          description: Error message if the query failed

    DDLProgress:
      type: object
      required: [ID, statement, progress]
      properties:
        ID:
          type: integer
          format: int64
        statement:
          type: string
        progress:
          type: string
          description: Progress of the materialized view creation
        initializedAt:
          type: string
          format: date-time
          description: When the DDL operation was initialized

    TestClusterConnectionPayload:
      type: object
      required:
        - host
        - sqlPort
        - metaPort
        - httpPort
      properties:
        host:
          type: string
        sqlPort:
          type: integer
          format: int32
        metaPort:
          type: integer
          format: int32
        httpPort:
          type: integer
          format: int32

    TestClusterConnectionResult:
      type: object
      required:
        - success
        - result
      properties:
        success:
          type: boolean
          description: Whether the cluster connection was successful
        result:
          type: string
          description: Test result

    TestDatabaseConnectionPayload:
      type: object
      required:
        - clusterID
        - username
        - database
      properties:
        clusterID:
          type: integer
          format: int32
        username:
          type: string
        password:
          type: string
        database:
          type: string

    TestDatabaseConnectionResult:
      type: object
      required:
        - result
        - success
      properties:
        success:
          type: boolean
          description: Whether the database connection was successful
        result:
          type: string
          description: Test result

    RisectlCommand:
      type: object
      required:
        - args
      properties:
        args:
          type: array
          items:
            type: string

    RisectlCommandResult:
      type: object
      required:
        - stdout
        - stderr
        - exitCode
        - err
      properties:
        stdout:
          type: string
          description: Standard output of the risectl command
        stderr:
          type: string
          description: Standard error of the risectl command
        exitCode:
          type: integer
          format: int32
          description: Exit code of the risectl command
        err:
          type: string
          description: Error message when try to run the risectl command

    MetricMatrix:
      type: array
      items:
        $ref: "#/components/schemas/MetricSeries"
          

    MetricSeries:
      type: object
      required: [metric, values]
      properties:
        metric:
          type: object
        values:
          type: array
          items:
            $ref: "#/components/schemas/MetricValue"

    MetricsStore:
      type: object
      required: [ID, name, createdAt]
      properties:
        ID:
          type: integer
          format: int32
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        spec:
          $ref: "#/components/schemas/MetricsStoreSpec"
        defaultLabels:
          $ref: "#/components/schemas/MetricsStoreLabelMatcherList"

    MetricsStoreCreate:
      type: object
      required: [name, spec]
      properties:
        name:
          type: string
        spec:
          $ref: "#/components/schemas/MetricsStoreSpec"
        defaultLabels:
          $ref: "#/components/schemas/MetricsStoreLabelMatcherList"

    MetricsStoreSpec:
      type: object
      properties:
        prometheus:
          $ref: "#/components/schemas/MetricsStorePrometheus"
        victoriametrics:
          $ref: "#/components/schemas/MetricsStoreVictoriaMetrics"

    MetricsStorePrometheus:
      type: object
      required: [endpoint]
      properties:
        endpoint:
          type: string

    MetricsStoreVictoriaMetrics:
      type: object
      required: [endpoint]
      properties:
        endpoint:
          type: string

    MetricValue:
      type: array

    MetricsStoreDownloadReq:
      type: object
      required: []
      properties:
        step:
          type: string
          description: Step of the metrics store, e.g. 1h, 1d, 1w, 1m, 1s
        start:
          type: string
          format: date-time
          description: Start time of the metrics store
        end:
          type: string
          format: date-time
          description: End time of the metrics store
        queryRatio:
          type: number
          description: |
             (0, 1], if OOM, reduce the memory usage in Prometheus instance by this ratio (default: 1)
        query:
          type: string
          description: |
            query to get the metrics, e.g. `{namespace="wavekit"}`

    MetricsStoreLabelMatcherList:
      type: array
      items:
        $ref: "#/components/schemas/MetricsStoreLabelMatcher"

    MetricsStoreLabelMatcher:
      type: object
      required: [op, key, value]
      properties:
        op:
          type: string
          enum: ["EQ", "NEQ", "RE", "NRE"]
        key:
          type: string
          description: Label key
        value:
          type: string
          description: Label value

    Task:
      type: object
      required: [ID, attributes, spec, status, createdAt, updatedAt]
      properties:
        ID:
          type: integer
          format: int32
        attributes:
          $ref: "#/components/schemas/TaskAttributes"
        spec:
          $ref: "#/components/schemas/TaskSpec"
        status:
          type: string
          enum: ["pending", "completed", "failed", "paused"]
        startedAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    TaskAttributes:
      type: object
      properties:
        orgID:
          type: integer
          format: int32
          description: If the task is created by a user, this field will be the organization ID of the user
        timeout:
          type: string
          description: Timeout of the task, e.g. 1h, 1d, 1w, 1m
        cronjob:
          $ref: "#/components/schemas/TaskCronjob"
        retryPolicy:
          $ref: "#/components/schemas/TaskRetryPolicy"

    TaskRetryPolicy:
      type: object
      required: [interval]
      properties:
        interval:
          type: string
          description: Interval of the retry policy, e.g. 1h, 1d, 1w, 1m
        always_retry_on_failure:
          type: boolean
          description: Whether to always retry the task on failure

    TaskCronjob:
      type: object
      required: [cronExpression]
      properties:
        cronExpression:
          type: string

    TaskSpec:
      type: object
      required: [type]
      properties:
        type:
          type: string
          enum: ["auto-backup", "auto-diagnostic", "delete-snapshot", "delete-cluster-diagnostic", "delete-opaque-key"]
        autoBackup:
          $ref: "#/components/schemas/TaskSpecAutoBackup"
        autoDiagnostic:
          $ref: "#/components/schemas/TaskSpecAutoDiagnostic"
        deleteSnapshot:
          $ref: "#/components/schemas/TaskSpecDeleteSnapshot"
        deleteClusterDiagnostic:
          $ref: "#/components/schemas/TaskSpecDeleteClusterDiagnostic"
        deleteOpaqueKey:
          $ref: "#/components/schemas/TaskSpecDeleteOpaqueKey"

    TaskSpecDeleteSnapshot:
      type: object
      required: [clusterID, snapshotID]
      properties:
        clusterID:
          type: integer
          format: int32
        snapshotID:
          type: integer
          format: int64
    
    TaskSpecDeleteClusterDiagnostic:
      type: object
      required: [clusterID, diagnosticID]
      properties:
        clusterID:
          type: integer
          format: int32
        diagnosticID:
          type: integer
          format: int32

    TaskSpecAutoBackup:
      type: object
      required: [clusterID, retentionDuration]
      properties:
        clusterID:
          type: integer
          format: int32
        retentionDuration:
          type: string
          description: Retention duration of the backup data, e.g. 1d, 1w, 1m, 1y

    TaskSpecAutoDiagnostic:
      type: object
      required: [clusterID, retentionDuration]
      properties:
        clusterID:
          type: integer
          format: int32
        retentionDuration:
          type: string
          description: Retention duration of the diagnostic data, e.g. 1d, 1w, 1m, 1y
    
    TaskSpecDeleteOpaqueKey:
      type: object
      required: [keyID]
      properties:
        keyID:
          type: integer
          format: int64

    Event:
      type: object
      required: [ID, spec, createdAt]
      properties:
        ID:
          type: integer
          format: int32
        spec:
          $ref: "#/components/schemas/EventSpec"
        createdAt:
          type: string
          format: date-time

    EventSpec:
      type: object
      required: [type]
      properties:
        type:
          type: string
          enum: ["TaskError", "TaskCompleted"]
        taskError:
          $ref: "#/components/schemas/EventTaskError"
        taskCompleted:
          $ref: "#/components/schemas/EventTaskCompleted"

    EventTaskError:
      type: object
      required: [taskID, error]
      properties:
        taskID:
          type: integer
          format: int32
        error:
          type: string

    EventTaskCompleted:
      type: object
      required: [taskID]
      properties:
        taskID:
          type: integer
          format: int32

x-check-rules:
  OwnDatabase:
    useContext: true
    parameters:
      - name: UserID
        schema:
          type: integer
          format: int32
      - name: DatabaseID
        schema:
          type: integer
          format: int32

x-functions:
  GetOrgID:
    description: Get the organization ID from the request
    useContext: true
    return:
      schema:
        type: integer
        format: int32
      description: The organization ID
