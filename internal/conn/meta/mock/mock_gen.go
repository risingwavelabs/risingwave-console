// Code generated by MockGen. DO NOT EDIT.
// Source: internal/conn/meta/types.go
//
// Generated by this command:
//
//	mockgen -source=internal/conn/meta/types.go -destination=internal/conn/meta/mock/mock_gen.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	meta "github.com/risingwavelabs/wavekit/internal/conn/meta"
	gomock "go.uber.org/mock/gomock"
)

// MockRisectlConn is a mock of RisectlConn interface.
type MockRisectlConn struct {
	ctrl     *gomock.Controller
	recorder *MockRisectlConnMockRecorder
	isgomock struct{}
}

// MockRisectlConnMockRecorder is the mock recorder for MockRisectlConn.
type MockRisectlConnMockRecorder struct {
	mock *MockRisectlConn
}

// NewMockRisectlConn creates a new mock instance.
func NewMockRisectlConn(ctrl *gomock.Controller) *MockRisectlConn {
	mock := &MockRisectlConn{ctrl: ctrl}
	mock.recorder = &MockRisectlConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRisectlConn) EXPECT() *MockRisectlConnMockRecorder {
	return m.recorder
}

// DeleteSnapshot mocks base method.
func (m *MockRisectlConn) DeleteSnapshot(ctx context.Context, snapshotID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSnapshot", ctx, snapshotID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSnapshot indicates an expected call of DeleteSnapshot.
func (mr *MockRisectlConnMockRecorder) DeleteSnapshot(ctx, snapshotID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshot", reflect.TypeOf((*MockRisectlConn)(nil).DeleteSnapshot), ctx, snapshotID)
}

// MetaBackup mocks base method.
func (m *MockRisectlConn) MetaBackup(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MetaBackup", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MetaBackup indicates an expected call of MetaBackup.
func (mr *MockRisectlConnMockRecorder) MetaBackup(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetaBackup", reflect.TypeOf((*MockRisectlConn)(nil).MetaBackup), ctx)
}

// Run mocks base method.
func (m *MockRisectlConn) Run(ctx context.Context, args ...string) (string, string, int, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Run", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// Run indicates an expected call of Run.
func (mr *MockRisectlConnMockRecorder) Run(ctx any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockRisectlConn)(nil).Run), varargs...)
}

// RunCombined mocks base method.
func (m *MockRisectlConn) RunCombined(ctx context.Context, args ...string) (string, int, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunCombined", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RunCombined indicates an expected call of RunCombined.
func (mr *MockRisectlConnMockRecorder) RunCombined(ctx any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCombined", reflect.TypeOf((*MockRisectlConn)(nil).RunCombined), varargs...)
}

// MockRisectlManagerInterface is a mock of RisectlManagerInterface interface.
type MockRisectlManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRisectlManagerInterfaceMockRecorder
	isgomock struct{}
}

// MockRisectlManagerInterfaceMockRecorder is the mock recorder for MockRisectlManagerInterface.
type MockRisectlManagerInterfaceMockRecorder struct {
	mock *MockRisectlManagerInterface
}

// NewMockRisectlManagerInterface creates a new mock instance.
func NewMockRisectlManagerInterface(ctrl *gomock.Controller) *MockRisectlManagerInterface {
	mock := &MockRisectlManagerInterface{ctrl: ctrl}
	mock.recorder = &MockRisectlManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRisectlManagerInterface) EXPECT() *MockRisectlManagerInterfaceMockRecorder {
	return m.recorder
}

// ListVersions mocks base method.
func (m *MockRisectlManagerInterface) ListVersions(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVersions", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVersions indicates an expected call of ListVersions.
func (mr *MockRisectlManagerInterfaceMockRecorder) ListVersions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVersions", reflect.TypeOf((*MockRisectlManagerInterface)(nil).ListVersions), ctx)
}

// NewConn mocks base method.
func (m *MockRisectlManagerInterface) NewConn(ctx context.Context, version, host string, metaPort int32) (meta.RisectlConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewConn", ctx, version, host, metaPort)
	ret0, _ := ret[0].(meta.RisectlConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewConn indicates an expected call of NewConn.
func (mr *MockRisectlManagerInterfaceMockRecorder) NewConn(ctx, version, host, metaPort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewConn", reflect.TypeOf((*MockRisectlManagerInterface)(nil).NewConn), ctx, version, host, metaPort)
}
