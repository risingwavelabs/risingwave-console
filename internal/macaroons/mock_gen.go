// Code generated by MockGen. DO NOT EDIT.
// Source: internal/macaroons/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=internal/macaroons/interfaces.go -destination=internal/macaroons/mock_gen.go -package=macaroons
//

// Package macaroons is a generated GoMock package.
package macaroons

import (
	context "context"
	reflect "reflect"
	time "time"

	fiber "github.com/gofiber/fiber/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockKeyStore is a mock of KeyStore interface.
type MockKeyStore struct {
	ctrl     *gomock.Controller
	recorder *MockKeyStoreMockRecorder
	isgomock struct{}
}

// MockKeyStoreMockRecorder is the mock recorder for MockKeyStore.
type MockKeyStoreMockRecorder struct {
	mock *MockKeyStore
}

// NewMockKeyStore creates a new mock instance.
func NewMockKeyStore(ctrl *gomock.Controller) *MockKeyStore {
	mock := &MockKeyStore{ctrl: ctrl}
	mock.recorder = &MockKeyStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyStore) EXPECT() *MockKeyStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockKeyStore) Create(ctx context.Context, key []byte, ttl time.Duration) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, key, ttl)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockKeyStoreMockRecorder) Create(ctx, key, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockKeyStore)(nil).Create), ctx, key, ttl)
}

// Delete mocks base method.
func (m *MockKeyStore) Delete(ctx context.Context, keyID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, keyID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockKeyStoreMockRecorder) Delete(ctx, keyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockKeyStore)(nil).Delete), ctx, keyID)
}

// Get mocks base method.
func (m *MockKeyStore) Get(ctx context.Context, keyID int64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, keyID)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockKeyStoreMockRecorder) Get(ctx, keyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKeyStore)(nil).Get), ctx, keyID)
}

// MockCaveatParser is a mock of CaveatParser interface.
type MockCaveatParser struct {
	ctrl     *gomock.Controller
	recorder *MockCaveatParserMockRecorder
	isgomock struct{}
}

// MockCaveatParserMockRecorder is the mock recorder for MockCaveatParser.
type MockCaveatParserMockRecorder struct {
	mock *MockCaveatParser
}

// NewMockCaveatParser creates a new mock instance.
func NewMockCaveatParser(ctrl *gomock.Controller) *MockCaveatParser {
	mock := &MockCaveatParser{ctrl: ctrl}
	mock.recorder = &MockCaveatParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCaveatParser) EXPECT() *MockCaveatParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockCaveatParser) Parse(arg0 string) (Caveat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", arg0)
	ret0, _ := ret[0].(Caveat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockCaveatParserMockRecorder) Parse(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockCaveatParser)(nil).Parse), arg0)
}

// MockCaveat is a mock of Caveat interface.
type MockCaveat struct {
	ctrl     *gomock.Controller
	recorder *MockCaveatMockRecorder
	isgomock struct{}
}

// MockCaveatMockRecorder is the mock recorder for MockCaveat.
type MockCaveatMockRecorder struct {
	mock *MockCaveat
}

// NewMockCaveat creates a new mock instance.
func NewMockCaveat(ctrl *gomock.Controller) *MockCaveat {
	mock := &MockCaveat{ctrl: ctrl}
	mock.recorder = &MockCaveatMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCaveat) EXPECT() *MockCaveatMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockCaveat) Decode(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode.
func (mr *MockCaveatMockRecorder) Decode(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockCaveat)(nil).Decode), arg0)
}

// Encode mocks base method.
func (m *MockCaveat) Encode() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encode indicates an expected call of Encode.
func (mr *MockCaveatMockRecorder) Encode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockCaveat)(nil).Encode))
}

// Type mocks base method.
func (m *MockCaveat) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockCaveatMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockCaveat)(nil).Type))
}

// Validate mocks base method.
func (m *MockCaveat) Validate(arg0 *fiber.Ctx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockCaveatMockRecorder) Validate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockCaveat)(nil).Validate), arg0)
}

// MockMacaroonManagerInterface is a mock of MacaroonManagerInterface interface.
type MockMacaroonManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMacaroonManagerInterfaceMockRecorder
	isgomock struct{}
}

// MockMacaroonManagerInterfaceMockRecorder is the mock recorder for MockMacaroonManagerInterface.
type MockMacaroonManagerInterfaceMockRecorder struct {
	mock *MockMacaroonManagerInterface
}

// NewMockMacaroonManagerInterface creates a new mock instance.
func NewMockMacaroonManagerInterface(ctrl *gomock.Controller) *MockMacaroonManagerInterface {
	mock := &MockMacaroonManagerInterface{ctrl: ctrl}
	mock.recorder = &MockMacaroonManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMacaroonManagerInterface) EXPECT() *MockMacaroonManagerInterfaceMockRecorder {
	return m.recorder
}

// CreateToken mocks base method.
func (m *MockMacaroonManagerInterface) CreateToken(ctx context.Context, caveats []Caveat, ttl time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", ctx, caveats, ttl)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockMacaroonManagerInterfaceMockRecorder) CreateToken(ctx, caveats, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockMacaroonManagerInterface)(nil).CreateToken), ctx, caveats, ttl)
}

// InvalidateToken mocks base method.
func (m *MockMacaroonManagerInterface) InvalidateToken(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateToken", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateToken indicates an expected call of InvalidateToken.
func (mr *MockMacaroonManagerInterfaceMockRecorder) InvalidateToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateToken", reflect.TypeOf((*MockMacaroonManagerInterface)(nil).InvalidateToken), ctx, token)
}

// Parse mocks base method.
func (m *MockMacaroonManagerInterface) Parse(ctx context.Context, token string) (*Macaroon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", ctx, token)
	ret0, _ := ret[0].(*Macaroon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockMacaroonManagerInterfaceMockRecorder) Parse(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockMacaroonManagerInterface)(nil).Parse), ctx, token)
}
