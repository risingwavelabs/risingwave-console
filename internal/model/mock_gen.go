// Code generated by MockGen. DO NOT EDIT.
// Source: internal/model/model.go

// Package model is a generated GoMock package.
package model

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	querier "github.com/risingwavelabs/wavekit/internal/model/querier"
)

// MockModelInterface is a mock of ModelInterface interface.
type MockModelInterface struct {
	ctrl     *gomock.Controller
	recorder *MockModelInterfaceMockRecorder
}

// MockModelInterfaceMockRecorder is the mock recorder for MockModelInterface.
type MockModelInterfaceMockRecorder struct {
	mock *MockModelInterface
}

// NewMockModelInterface creates a new mock instance.
func NewMockModelInterface(ctrl *gomock.Controller) *MockModelInterface {
	mock := &MockModelInterface{ctrl: ctrl}
	mock.recorder = &MockModelInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelInterface) EXPECT() *MockModelInterfaceMockRecorder {
	return m.recorder
}

// CreateCluster mocks base method.
func (m *MockModelInterface) CreateCluster(ctx context.Context, arg querier.CreateClusterParams) (*querier.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCluster", ctx, arg)
	ret0, _ := ret[0].(*querier.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCluster indicates an expected call of CreateCluster.
func (mr *MockModelInterfaceMockRecorder) CreateCluster(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockModelInterface)(nil).CreateCluster), ctx, arg)
}

// CreateDatabaseConnection mocks base method.
func (m *MockModelInterface) CreateDatabaseConnection(ctx context.Context, arg querier.CreateDatabaseConnectionParams) (*querier.DatabaseConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatabaseConnection", ctx, arg)
	ret0, _ := ret[0].(*querier.DatabaseConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatabaseConnection indicates an expected call of CreateDatabaseConnection.
func (mr *MockModelInterfaceMockRecorder) CreateDatabaseConnection(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatabaseConnection", reflect.TypeOf((*MockModelInterface)(nil).CreateDatabaseConnection), ctx, arg)
}

// CreateOrganization mocks base method.
func (m *MockModelInterface) CreateOrganization(ctx context.Context, name string) (*querier.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganization", ctx, name)
	ret0, _ := ret[0].(*querier.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganization indicates an expected call of CreateOrganization.
func (mr *MockModelInterfaceMockRecorder) CreateOrganization(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganization", reflect.TypeOf((*MockModelInterface)(nil).CreateOrganization), ctx, name)
}

// CreateOrganizationOwner mocks base method.
func (m *MockModelInterface) CreateOrganizationOwner(ctx context.Context, arg querier.CreateOrganizationOwnerParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganizationOwner", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrganizationOwner indicates an expected call of CreateOrganizationOwner.
func (mr *MockModelInterfaceMockRecorder) CreateOrganizationOwner(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganizationOwner", reflect.TypeOf((*MockModelInterface)(nil).CreateOrganizationOwner), ctx, arg)
}

// CreateUser mocks base method.
func (m *MockModelInterface) CreateUser(ctx context.Context, arg querier.CreateUserParams) (*querier.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, arg)
	ret0, _ := ret[0].(*querier.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockModelInterfaceMockRecorder) CreateUser(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockModelInterface)(nil).CreateUser), ctx, arg)
}

// DeleteCluster mocks base method.
func (m *MockModelInterface) DeleteCluster(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCluster", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockModelInterfaceMockRecorder) DeleteCluster(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockModelInterface)(nil).DeleteCluster), ctx, id)
}

// DeleteDatabaseConnection mocks base method.
func (m *MockModelInterface) DeleteDatabaseConnection(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDatabaseConnection", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDatabaseConnection indicates an expected call of DeleteDatabaseConnection.
func (mr *MockModelInterfaceMockRecorder) DeleteDatabaseConnection(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatabaseConnection", reflect.TypeOf((*MockModelInterface)(nil).DeleteDatabaseConnection), ctx, id)
}

// DeleteOrganization mocks base method.
func (m *MockModelInterface) DeleteOrganization(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrganization", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrganization indicates an expected call of DeleteOrganization.
func (mr *MockModelInterfaceMockRecorder) DeleteOrganization(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganization", reflect.TypeOf((*MockModelInterface)(nil).DeleteOrganization), ctx, id)
}

// DeleteRefreshToken mocks base method.
func (m *MockModelInterface) DeleteRefreshToken(ctx context.Context, arg querier.DeleteRefreshTokenParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRefreshToken", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRefreshToken indicates an expected call of DeleteRefreshToken.
func (mr *MockModelInterfaceMockRecorder) DeleteRefreshToken(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRefreshToken", reflect.TypeOf((*MockModelInterface)(nil).DeleteRefreshToken), ctx, arg)
}

// DeleteUserByName mocks base method.
func (m *MockModelInterface) DeleteUserByName(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserByName", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserByName indicates an expected call of DeleteUserByName.
func (mr *MockModelInterfaceMockRecorder) DeleteUserByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserByName", reflect.TypeOf((*MockModelInterface)(nil).DeleteUserByName), ctx, name)
}

// GetCluster mocks base method.
func (m *MockModelInterface) GetCluster(ctx context.Context, id int32) (*querier.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCluster", ctx, id)
	ret0, _ := ret[0].(*querier.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockModelInterfaceMockRecorder) GetCluster(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockModelInterface)(nil).GetCluster), ctx, id)
}

// GetDatabaseConnection mocks base method.
func (m *MockModelInterface) GetDatabaseConnection(ctx context.Context, id int32) (*querier.DatabaseConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatabaseConnection", ctx, id)
	ret0, _ := ret[0].(*querier.DatabaseConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatabaseConnection indicates an expected call of GetDatabaseConnection.
func (mr *MockModelInterfaceMockRecorder) GetDatabaseConnection(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatabaseConnection", reflect.TypeOf((*MockModelInterface)(nil).GetDatabaseConnection), ctx, id)
}

// GetOrganization mocks base method.
func (m *MockModelInterface) GetOrganization(ctx context.Context, id int32) (*querier.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganization", ctx, id)
	ret0, _ := ret[0].(*querier.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganization indicates an expected call of GetOrganization.
func (mr *MockModelInterfaceMockRecorder) GetOrganization(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganization", reflect.TypeOf((*MockModelInterface)(nil).GetOrganization), ctx, id)
}

// GetRefreshToken mocks base method.
func (m *MockModelInterface) GetRefreshToken(ctx context.Context, arg querier.GetRefreshTokenParams) (*querier.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshToken", ctx, arg)
	ret0, _ := ret[0].(*querier.RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefreshToken indicates an expected call of GetRefreshToken.
func (mr *MockModelInterfaceMockRecorder) GetRefreshToken(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshToken", reflect.TypeOf((*MockModelInterface)(nil).GetRefreshToken), ctx, arg)
}

// GetUser mocks base method.
func (m *MockModelInterface) GetUser(ctx context.Context, id int32) (*querier.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, id)
	ret0, _ := ret[0].(*querier.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockModelInterfaceMockRecorder) GetUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockModelInterface)(nil).GetUser), ctx, id)
}

// GetUserByName mocks base method.
func (m *MockModelInterface) GetUserByName(ctx context.Context, name string) (*querier.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByName", ctx, name)
	ret0, _ := ret[0].(*querier.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByName indicates an expected call of GetUserByName.
func (mr *MockModelInterfaceMockRecorder) GetUserByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByName", reflect.TypeOf((*MockModelInterface)(nil).GetUserByName), ctx, name)
}

// GetUserDatabaseByID mocks base method.
func (m *MockModelInterface) GetUserDatabaseByID(ctx context.Context, arg querier.GetUserDatabaseByIDParams) (*querier.DatabaseConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDatabaseByID", ctx, arg)
	ret0, _ := ret[0].(*querier.DatabaseConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDatabaseByID indicates an expected call of GetUserDatabaseByID.
func (mr *MockModelInterfaceMockRecorder) GetUserDatabaseByID(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDatabaseByID", reflect.TypeOf((*MockModelInterface)(nil).GetUserDatabaseByID), ctx, arg)
}

// InTransaction mocks base method.
func (m *MockModelInterface) InTransaction() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InTransaction")
	ret0, _ := ret[0].(bool)
	return ret0
}

// InTransaction indicates an expected call of InTransaction.
func (mr *MockModelInterfaceMockRecorder) InTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InTransaction", reflect.TypeOf((*MockModelInterface)(nil).InTransaction))
}

// ListClusters mocks base method.
func (m *MockModelInterface) ListClusters(ctx context.Context, organizationID int32) ([]*querier.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusters", ctx, organizationID)
	ret0, _ := ret[0].([]*querier.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusters indicates an expected call of ListClusters.
func (mr *MockModelInterfaceMockRecorder) ListClusters(ctx, organizationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusters", reflect.TypeOf((*MockModelInterface)(nil).ListClusters), ctx, organizationID)
}

// ListDatabaseConnections mocks base method.
func (m *MockModelInterface) ListDatabaseConnections(ctx context.Context, organizationID int32) ([]*querier.DatabaseConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatabaseConnections", ctx, organizationID)
	ret0, _ := ret[0].([]*querier.DatabaseConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatabaseConnections indicates an expected call of ListDatabaseConnections.
func (mr *MockModelInterfaceMockRecorder) ListDatabaseConnections(ctx, organizationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatabaseConnections", reflect.TypeOf((*MockModelInterface)(nil).ListDatabaseConnections), ctx, organizationID)
}

// ListOrganizations mocks base method.
func (m *MockModelInterface) ListOrganizations(ctx context.Context) ([]*querier.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizations", ctx)
	ret0, _ := ret[0].([]*querier.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrganizations indicates an expected call of ListOrganizations.
func (mr *MockModelInterfaceMockRecorder) ListOrganizations(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizations", reflect.TypeOf((*MockModelInterface)(nil).ListOrganizations), ctx)
}

// RunTransaction mocks base method.
func (m *MockModelInterface) RunTransaction(ctx context.Context, f func(ModelInterface) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunTransaction", ctx, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunTransaction indicates an expected call of RunTransaction.
func (mr *MockModelInterfaceMockRecorder) RunTransaction(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunTransaction", reflect.TypeOf((*MockModelInterface)(nil).RunTransaction), ctx, f)
}

// UpdateCluster mocks base method.
func (m *MockModelInterface) UpdateCluster(ctx context.Context, arg querier.UpdateClusterParams) (*querier.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCluster", ctx, arg)
	ret0, _ := ret[0].(*querier.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCluster indicates an expected call of UpdateCluster.
func (mr *MockModelInterfaceMockRecorder) UpdateCluster(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCluster", reflect.TypeOf((*MockModelInterface)(nil).UpdateCluster), ctx, arg)
}

// UpdateDatabaseConnection mocks base method.
func (m *MockModelInterface) UpdateDatabaseConnection(ctx context.Context, arg querier.UpdateDatabaseConnectionParams) (*querier.DatabaseConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDatabaseConnection", ctx, arg)
	ret0, _ := ret[0].(*querier.DatabaseConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDatabaseConnection indicates an expected call of UpdateDatabaseConnection.
func (mr *MockModelInterfaceMockRecorder) UpdateDatabaseConnection(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDatabaseConnection", reflect.TypeOf((*MockModelInterface)(nil).UpdateDatabaseConnection), ctx, arg)
}

// UpdateOrganization mocks base method.
func (m *MockModelInterface) UpdateOrganization(ctx context.Context, arg querier.UpdateOrganizationParams) (*querier.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganization", ctx, arg)
	ret0, _ := ret[0].(*querier.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrganization indicates an expected call of UpdateOrganization.
func (mr *MockModelInterfaceMockRecorder) UpdateOrganization(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganization", reflect.TypeOf((*MockModelInterface)(nil).UpdateOrganization), ctx, arg)
}

// UpsertRefreshToken mocks base method.
func (m *MockModelInterface) UpsertRefreshToken(ctx context.Context, arg querier.UpsertRefreshTokenParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertRefreshToken", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertRefreshToken indicates an expected call of UpsertRefreshToken.
func (mr *MockModelInterfaceMockRecorder) UpsertRefreshToken(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRefreshToken", reflect.TypeOf((*MockModelInterface)(nil).UpsertRefreshToken), ctx, arg)
}
