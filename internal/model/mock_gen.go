// Code generated by MockGen. DO NOT EDIT.
// Source: internal/model/model.go

// Package model is a generated GoMock package.
package model

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	querier "github.com/risingwavelabs/wavekit/internal/model/querier"
)

// MockModelInterface is a mock of ModelInterface interface.
type MockModelInterface struct {
	ctrl     *gomock.Controller
	recorder *MockModelInterfaceMockRecorder
}

// MockModelInterfaceMockRecorder is the mock recorder for MockModelInterface.
type MockModelInterfaceMockRecorder struct {
	mock *MockModelInterface
}

// NewMockModelInterface creates a new mock instance.
func NewMockModelInterface(ctrl *gomock.Controller) *MockModelInterface {
	mock := &MockModelInterface{ctrl: ctrl}
	mock.recorder = &MockModelInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelInterface) EXPECT() *MockModelInterfaceMockRecorder {
	return m.recorder
}

// CreateCluster mocks base method.
func (m *MockModelInterface) CreateCluster(ctx context.Context, arg querier.CreateClusterParams) (*querier.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCluster", ctx, arg)
	ret0, _ := ret[0].(*querier.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCluster indicates an expected call of CreateCluster.
func (mr *MockModelInterfaceMockRecorder) CreateCluster(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockModelInterface)(nil).CreateCluster), ctx, arg)
}

// CreateDatabaseConnection mocks base method.
func (m *MockModelInterface) CreateDatabaseConnection(ctx context.Context, arg querier.CreateDatabaseConnectionParams) (*querier.DatabaseConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatabaseConnection", ctx, arg)
	ret0, _ := ret[0].(*querier.DatabaseConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatabaseConnection indicates an expected call of CreateDatabaseConnection.
func (mr *MockModelInterfaceMockRecorder) CreateDatabaseConnection(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatabaseConnection", reflect.TypeOf((*MockModelInterface)(nil).CreateDatabaseConnection), ctx, arg)
}

// CreateOrganization mocks base method.
func (m *MockModelInterface) CreateOrganization(ctx context.Context, name string) (*querier.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganization", ctx, name)
	ret0, _ := ret[0].(*querier.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganization indicates an expected call of CreateOrganization.
func (mr *MockModelInterfaceMockRecorder) CreateOrganization(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganization", reflect.TypeOf((*MockModelInterface)(nil).CreateOrganization), ctx, name)
}

// CreateOrganizationOwner mocks base method.
func (m *MockModelInterface) CreateOrganizationOwner(ctx context.Context, arg querier.CreateOrganizationOwnerParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganizationOwner", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrganizationOwner indicates an expected call of CreateOrganizationOwner.
func (mr *MockModelInterfaceMockRecorder) CreateOrganizationOwner(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganizationOwner", reflect.TypeOf((*MockModelInterface)(nil).CreateOrganizationOwner), ctx, arg)
}

// CreateUser mocks base method.
func (m *MockModelInterface) CreateUser(ctx context.Context, arg querier.CreateUserParams) (*querier.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, arg)
	ret0, _ := ret[0].(*querier.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockModelInterfaceMockRecorder) CreateUser(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockModelInterface)(nil).CreateUser), ctx, arg)
}

// DeleteAllOrgDatabaseConnectionsByClusterID mocks base method.
func (m *MockModelInterface) DeleteAllOrgDatabaseConnectionsByClusterID(ctx context.Context, arg querier.DeleteAllOrgDatabaseConnectionsByClusterIDParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllOrgDatabaseConnectionsByClusterID", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOrgDatabaseConnectionsByClusterID indicates an expected call of DeleteAllOrgDatabaseConnectionsByClusterID.
func (mr *MockModelInterfaceMockRecorder) DeleteAllOrgDatabaseConnectionsByClusterID(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOrgDatabaseConnectionsByClusterID", reflect.TypeOf((*MockModelInterface)(nil).DeleteAllOrgDatabaseConnectionsByClusterID), ctx, arg)
}

// DeleteOrgCluster mocks base method.
func (m *MockModelInterface) DeleteOrgCluster(ctx context.Context, arg querier.DeleteOrgClusterParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrgCluster", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrgCluster indicates an expected call of DeleteOrgCluster.
func (mr *MockModelInterfaceMockRecorder) DeleteOrgCluster(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrgCluster", reflect.TypeOf((*MockModelInterface)(nil).DeleteOrgCluster), ctx, arg)
}

// DeleteOrgDatabaseConnection mocks base method.
func (m *MockModelInterface) DeleteOrgDatabaseConnection(ctx context.Context, arg querier.DeleteOrgDatabaseConnectionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrgDatabaseConnection", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrgDatabaseConnection indicates an expected call of DeleteOrgDatabaseConnection.
func (mr *MockModelInterfaceMockRecorder) DeleteOrgDatabaseConnection(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrgDatabaseConnection", reflect.TypeOf((*MockModelInterface)(nil).DeleteOrgDatabaseConnection), ctx, arg)
}

// DeleteOrganization mocks base method.
func (m *MockModelInterface) DeleteOrganization(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrganization", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrganization indicates an expected call of DeleteOrganization.
func (mr *MockModelInterfaceMockRecorder) DeleteOrganization(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganization", reflect.TypeOf((*MockModelInterface)(nil).DeleteOrganization), ctx, id)
}

// DeleteRefreshToken mocks base method.
func (m *MockModelInterface) DeleteRefreshToken(ctx context.Context, arg querier.DeleteRefreshTokenParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRefreshToken", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRefreshToken indicates an expected call of DeleteRefreshToken.
func (mr *MockModelInterfaceMockRecorder) DeleteRefreshToken(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRefreshToken", reflect.TypeOf((*MockModelInterface)(nil).DeleteRefreshToken), ctx, arg)
}

// DeleteUserByName mocks base method.
func (m *MockModelInterface) DeleteUserByName(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserByName", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserByName indicates an expected call of DeleteUserByName.
func (mr *MockModelInterfaceMockRecorder) DeleteUserByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserByName", reflect.TypeOf((*MockModelInterface)(nil).DeleteUserByName), ctx, name)
}

// GetAllOrgDatabseConnectionsByClusterID mocks base method.
func (m *MockModelInterface) GetAllOrgDatabseConnectionsByClusterID(ctx context.Context, arg querier.GetAllOrgDatabseConnectionsByClusterIDParams) ([]*querier.DatabaseConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrgDatabseConnectionsByClusterID", ctx, arg)
	ret0, _ := ret[0].([]*querier.DatabaseConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrgDatabseConnectionsByClusterID indicates an expected call of GetAllOrgDatabseConnectionsByClusterID.
func (mr *MockModelInterfaceMockRecorder) GetAllOrgDatabseConnectionsByClusterID(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrgDatabseConnectionsByClusterID", reflect.TypeOf((*MockModelInterface)(nil).GetAllOrgDatabseConnectionsByClusterID), ctx, arg)
}

// GetClusterByID mocks base method.
func (m *MockModelInterface) GetClusterByID(ctx context.Context, id int32) (*querier.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterByID", ctx, id)
	ret0, _ := ret[0].(*querier.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterByID indicates an expected call of GetClusterByID.
func (mr *MockModelInterfaceMockRecorder) GetClusterByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterByID", reflect.TypeOf((*MockModelInterface)(nil).GetClusterByID), ctx, id)
}

// GetDatabaseConnectionByID mocks base method.
func (m *MockModelInterface) GetDatabaseConnectionByID(ctx context.Context, id int32) (*querier.DatabaseConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatabaseConnectionByID", ctx, id)
	ret0, _ := ret[0].(*querier.DatabaseConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatabaseConnectionByID indicates an expected call of GetDatabaseConnectionByID.
func (mr *MockModelInterfaceMockRecorder) GetDatabaseConnectionByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatabaseConnectionByID", reflect.TypeOf((*MockModelInterface)(nil).GetDatabaseConnectionByID), ctx, id)
}

// GetOrgCluster mocks base method.
func (m *MockModelInterface) GetOrgCluster(ctx context.Context, arg querier.GetOrgClusterParams) (*querier.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrgCluster", ctx, arg)
	ret0, _ := ret[0].(*querier.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrgCluster indicates an expected call of GetOrgCluster.
func (mr *MockModelInterfaceMockRecorder) GetOrgCluster(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrgCluster", reflect.TypeOf((*MockModelInterface)(nil).GetOrgCluster), ctx, arg)
}

// GetOrgDatabaseByID mocks base method.
func (m *MockModelInterface) GetOrgDatabaseByID(ctx context.Context, arg querier.GetOrgDatabaseByIDParams) (*querier.DatabaseConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrgDatabaseByID", ctx, arg)
	ret0, _ := ret[0].(*querier.DatabaseConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrgDatabaseByID indicates an expected call of GetOrgDatabaseByID.
func (mr *MockModelInterfaceMockRecorder) GetOrgDatabaseByID(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrgDatabaseByID", reflect.TypeOf((*MockModelInterface)(nil).GetOrgDatabaseByID), ctx, arg)
}

// GetOrgDatabaseConnection mocks base method.
func (m *MockModelInterface) GetOrgDatabaseConnection(ctx context.Context, arg querier.GetOrgDatabaseConnectionParams) (*querier.DatabaseConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrgDatabaseConnection", ctx, arg)
	ret0, _ := ret[0].(*querier.DatabaseConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrgDatabaseConnection indicates an expected call of GetOrgDatabaseConnection.
func (mr *MockModelInterfaceMockRecorder) GetOrgDatabaseConnection(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrgDatabaseConnection", reflect.TypeOf((*MockModelInterface)(nil).GetOrgDatabaseConnection), ctx, arg)
}

// GetOrganization mocks base method.
func (m *MockModelInterface) GetOrganization(ctx context.Context, id int32) (*querier.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganization", ctx, id)
	ret0, _ := ret[0].(*querier.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganization indicates an expected call of GetOrganization.
func (mr *MockModelInterfaceMockRecorder) GetOrganization(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganization", reflect.TypeOf((*MockModelInterface)(nil).GetOrganization), ctx, id)
}

// GetRefreshToken mocks base method.
func (m *MockModelInterface) GetRefreshToken(ctx context.Context, arg querier.GetRefreshTokenParams) (*querier.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshToken", ctx, arg)
	ret0, _ := ret[0].(*querier.RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefreshToken indicates an expected call of GetRefreshToken.
func (mr *MockModelInterfaceMockRecorder) GetRefreshToken(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshToken", reflect.TypeOf((*MockModelInterface)(nil).GetRefreshToken), ctx, arg)
}

// GetUser mocks base method.
func (m *MockModelInterface) GetUser(ctx context.Context, id int32) (*querier.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, id)
	ret0, _ := ret[0].(*querier.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockModelInterfaceMockRecorder) GetUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockModelInterface)(nil).GetUser), ctx, id)
}

// GetUserByName mocks base method.
func (m *MockModelInterface) GetUserByName(ctx context.Context, name string) (*querier.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByName", ctx, name)
	ret0, _ := ret[0].(*querier.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByName indicates an expected call of GetUserByName.
func (mr *MockModelInterfaceMockRecorder) GetUserByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByName", reflect.TypeOf((*MockModelInterface)(nil).GetUserByName), ctx, name)
}

// InTransaction mocks base method.
func (m *MockModelInterface) InTransaction() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InTransaction")
	ret0, _ := ret[0].(bool)
	return ret0
}

// InTransaction indicates an expected call of InTransaction.
func (mr *MockModelInterfaceMockRecorder) InTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InTransaction", reflect.TypeOf((*MockModelInterface)(nil).InTransaction))
}

// InitCluster mocks base method.
func (m *MockModelInterface) InitCluster(ctx context.Context, arg querier.InitClusterParams) (*querier.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitCluster", ctx, arg)
	ret0, _ := ret[0].(*querier.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitCluster indicates an expected call of InitCluster.
func (mr *MockModelInterfaceMockRecorder) InitCluster(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitCluster", reflect.TypeOf((*MockModelInterface)(nil).InitCluster), ctx, arg)
}

// InitDatabaseConnection mocks base method.
func (m *MockModelInterface) InitDatabaseConnection(ctx context.Context, arg querier.InitDatabaseConnectionParams) (*querier.DatabaseConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitDatabaseConnection", ctx, arg)
	ret0, _ := ret[0].(*querier.DatabaseConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitDatabaseConnection indicates an expected call of InitDatabaseConnection.
func (mr *MockModelInterfaceMockRecorder) InitDatabaseConnection(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitDatabaseConnection", reflect.TypeOf((*MockModelInterface)(nil).InitDatabaseConnection), ctx, arg)
}

// ListOrgClusters mocks base method.
func (m *MockModelInterface) ListOrgClusters(ctx context.Context, organizationID int32) ([]*querier.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrgClusters", ctx, organizationID)
	ret0, _ := ret[0].([]*querier.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrgClusters indicates an expected call of ListOrgClusters.
func (mr *MockModelInterfaceMockRecorder) ListOrgClusters(ctx, organizationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrgClusters", reflect.TypeOf((*MockModelInterface)(nil).ListOrgClusters), ctx, organizationID)
}

// ListOrgDatabaseConnections mocks base method.
func (m *MockModelInterface) ListOrgDatabaseConnections(ctx context.Context, organizationID int32) ([]*querier.DatabaseConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrgDatabaseConnections", ctx, organizationID)
	ret0, _ := ret[0].([]*querier.DatabaseConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrgDatabaseConnections indicates an expected call of ListOrgDatabaseConnections.
func (mr *MockModelInterfaceMockRecorder) ListOrgDatabaseConnections(ctx, organizationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrgDatabaseConnections", reflect.TypeOf((*MockModelInterface)(nil).ListOrgDatabaseConnections), ctx, organizationID)
}

// ListOrganizations mocks base method.
func (m *MockModelInterface) ListOrganizations(ctx context.Context) ([]*querier.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizations", ctx)
	ret0, _ := ret[0].([]*querier.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrganizations indicates an expected call of ListOrganizations.
func (mr *MockModelInterfaceMockRecorder) ListOrganizations(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizations", reflect.TypeOf((*MockModelInterface)(nil).ListOrganizations), ctx)
}

// RunTransaction mocks base method.
func (m *MockModelInterface) RunTransaction(ctx context.Context, f func(ModelInterface) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunTransaction", ctx, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunTransaction indicates an expected call of RunTransaction.
func (mr *MockModelInterfaceMockRecorder) RunTransaction(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunTransaction", reflect.TypeOf((*MockModelInterface)(nil).RunTransaction), ctx, f)
}

// UpdateOrgCluster mocks base method.
func (m *MockModelInterface) UpdateOrgCluster(ctx context.Context, arg querier.UpdateOrgClusterParams) (*querier.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrgCluster", ctx, arg)
	ret0, _ := ret[0].(*querier.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrgCluster indicates an expected call of UpdateOrgCluster.
func (mr *MockModelInterfaceMockRecorder) UpdateOrgCluster(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrgCluster", reflect.TypeOf((*MockModelInterface)(nil).UpdateOrgCluster), ctx, arg)
}

// UpdateOrgDatabaseConnection mocks base method.
func (m *MockModelInterface) UpdateOrgDatabaseConnection(ctx context.Context, arg querier.UpdateOrgDatabaseConnectionParams) (*querier.DatabaseConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrgDatabaseConnection", ctx, arg)
	ret0, _ := ret[0].(*querier.DatabaseConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrgDatabaseConnection indicates an expected call of UpdateOrgDatabaseConnection.
func (mr *MockModelInterfaceMockRecorder) UpdateOrgDatabaseConnection(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrgDatabaseConnection", reflect.TypeOf((*MockModelInterface)(nil).UpdateOrgDatabaseConnection), ctx, arg)
}

// UpdateOrganization mocks base method.
func (m *MockModelInterface) UpdateOrganization(ctx context.Context, arg querier.UpdateOrganizationParams) (*querier.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganization", ctx, arg)
	ret0, _ := ret[0].(*querier.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrganization indicates an expected call of UpdateOrganization.
func (mr *MockModelInterfaceMockRecorder) UpdateOrganization(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganization", reflect.TypeOf((*MockModelInterface)(nil).UpdateOrganization), ctx, arg)
}

// UpsertRefreshToken mocks base method.
func (m *MockModelInterface) UpsertRefreshToken(ctx context.Context, arg querier.UpsertRefreshTokenParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertRefreshToken", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertRefreshToken indicates an expected call of UpsertRefreshToken.
func (mr *MockModelInterfaceMockRecorder) UpsertRefreshToken(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRefreshToken", reflect.TypeOf((*MockModelInterface)(nil).UpsertRefreshToken), ctx, arg)
}
