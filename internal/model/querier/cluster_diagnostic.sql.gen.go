// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: cluster_diagnostic.sql

package querier

import (
	"context"
	"time"
)

const createClusterDiagnostic = `-- name: CreateClusterDiagnostic :one
INSERT INTO cluster_diagnostics (cluster_id, content) VALUES ($1, $2) RETURNING id, cluster_id, content, created_at, updated_at
`

type CreateClusterDiagnosticParams struct {
	ClusterID int32
	Content   string
}

func (q *Queries) CreateClusterDiagnostic(ctx context.Context, arg CreateClusterDiagnosticParams) (*ClusterDiagnostic, error) {
	row := q.db.QueryRow(ctx, createClusterDiagnostic, arg.ClusterID, arg.Content)
	var i ClusterDiagnostic
	err := row.Scan(
		&i.ID,
		&i.ClusterID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getClusterDiagnostic = `-- name: GetClusterDiagnostic :one
SELECT id, cluster_id, content, created_at, updated_at FROM cluster_diagnostics WHERE id = $1
`

func (q *Queries) GetClusterDiagnostic(ctx context.Context, id int32) (*ClusterDiagnostic, error) {
	row := q.db.QueryRow(ctx, getClusterDiagnostic, id)
	var i ClusterDiagnostic
	err := row.Scan(
		&i.ID,
		&i.ClusterID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const listClusterDiagnostics = `-- name: ListClusterDiagnostics :many
SELECT id, created_at FROM cluster_diagnostics WHERE cluster_id = $1 ORDER BY created_at DESC
`

type ListClusterDiagnosticsRow struct {
	ID        int32
	CreatedAt time.Time
}

func (q *Queries) ListClusterDiagnostics(ctx context.Context, clusterID int32) ([]*ListClusterDiagnosticsRow, error) {
	rows, err := q.db.Query(ctx, listClusterDiagnostics, clusterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ListClusterDiagnosticsRow
	for rows.Next() {
		var i ListClusterDiagnosticsRow
		if err := rows.Scan(&i.ID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
