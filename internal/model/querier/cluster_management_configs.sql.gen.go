// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: cluster_management_configs.sql

package querier

import (
	"context"
)

const getAutoBackupConfig = `-- name: GetAutoBackupConfig :one
SELECT cluster_id, enabled, cron_expression, keep_last, created_at, updated_at FROM auto_backup_configs
WHERE cluster_id = $1
`

func (q *Queries) GetAutoBackupConfig(ctx context.Context, clusterID int32) (*AutoBackupConfig, error) {
	row := q.db.QueryRow(ctx, getAutoBackupConfig, clusterID)
	var i AutoBackupConfig
	err := row.Scan(
		&i.ClusterID,
		&i.Enabled,
		&i.CronExpression,
		&i.KeepLast,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getAutoDiagnosticsConfig = `-- name: GetAutoDiagnosticsConfig :one
SELECT cluster_id, enabled, cron_expression, retention_duration, created_at, updated_at FROM auto_diagnostics_configs
WHERE cluster_id = $1
`

func (q *Queries) GetAutoDiagnosticsConfig(ctx context.Context, clusterID int32) (*AutoDiagnosticsConfig, error) {
	row := q.db.QueryRow(ctx, getAutoDiagnosticsConfig, clusterID)
	var i AutoDiagnosticsConfig
	err := row.Scan(
		&i.ClusterID,
		&i.Enabled,
		&i.CronExpression,
		&i.RetentionDuration,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const upsertAutoBackupConfig = `-- name: UpsertAutoBackupConfig :exec
INSERT INTO auto_backup_configs (cluster_id, enabled, cron_expression, keep_last)
VALUES ($1, $2, $3, $4)
ON CONFLICT (cluster_id) DO UPDATE SET enabled = $2, cron_expression = $3, keep_last = $4
`

type UpsertAutoBackupConfigParams struct {
	ClusterID      int32
	Enabled        bool
	CronExpression string
	KeepLast       int32
}

func (q *Queries) UpsertAutoBackupConfig(ctx context.Context, arg UpsertAutoBackupConfigParams) error {
	_, err := q.db.Exec(ctx, upsertAutoBackupConfig,
		arg.ClusterID,
		arg.Enabled,
		arg.CronExpression,
		arg.KeepLast,
	)
	return err
}

const upsertAutoDiagnosticsConfig = `-- name: UpsertAutoDiagnosticsConfig :exec
INSERT INTO auto_diagnostics_configs (cluster_id, enabled, cron_expression, retention_duration)
VALUES ($1, $2, $3, $4)
ON CONFLICT (cluster_id) DO UPDATE SET enabled = $2, cron_expression = $3, retention_duration = $4
`

type UpsertAutoDiagnosticsConfigParams struct {
	ClusterID         int32
	Enabled           bool
	CronExpression    string
	RetentionDuration *string
}

func (q *Queries) UpsertAutoDiagnosticsConfig(ctx context.Context, arg UpsertAutoDiagnosticsConfigParams) error {
	_, err := q.db.Exec(ctx, upsertAutoDiagnosticsConfig,
		arg.ClusterID,
		arg.Enabled,
		arg.CronExpression,
		arg.RetentionDuration,
	)
	return err
}
