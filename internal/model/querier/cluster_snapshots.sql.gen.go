// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: cluster_snapshots.sql

package querier

import (
	"context"
)

const createClusterSnapshot = `-- name: CreateClusterSnapshot :exec
INSERT INTO cluster_snapshots (cluster_id, snapshot_id, name)
VALUES ($1, $2, $3)
`

type CreateClusterSnapshotParams struct {
	ClusterID  int32
	SnapshotID int64
	Name       string
}

func (q *Queries) CreateClusterSnapshot(ctx context.Context, arg CreateClusterSnapshotParams) error {
	_, err := q.db.Exec(ctx, createClusterSnapshot, arg.ClusterID, arg.SnapshotID, arg.Name)
	return err
}

const deleteClusterSnapshot = `-- name: DeleteClusterSnapshot :exec
DELETE FROM cluster_snapshots
WHERE cluster_id = $1 AND snapshot_id = $2
`

type DeleteClusterSnapshotParams struct {
	ClusterID  int32
	SnapshotID int64
}

func (q *Queries) DeleteClusterSnapshot(ctx context.Context, arg DeleteClusterSnapshotParams) error {
	_, err := q.db.Exec(ctx, deleteClusterSnapshot, arg.ClusterID, arg.SnapshotID)
	return err
}

const listClusterSnapshots = `-- name: ListClusterSnapshots :many
SELECT cluster_id, snapshot_id, name, created_at, updated_at FROM cluster_snapshots
WHERE cluster_id = $1
`

func (q *Queries) ListClusterSnapshots(ctx context.Context, clusterID int32) ([]*ClusterSnapshot, error) {
	rows, err := q.db.Query(ctx, listClusterSnapshots, clusterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ClusterSnapshot
	for rows.Next() {
		var i ClusterSnapshot
		if err := rows.Scan(
			&i.ClusterID,
			&i.SnapshotID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
