// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: clusters.sql

package querier

import (
	"context"
)

const createCluster = `-- name: CreateCluster :one
INSERT INTO clusters (
    organization_id,
    name,
    host,
    sql_port,
    meta_port
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, organization_id, name, host, sql_port, meta_port, created_at, updated_at
`

type CreateClusterParams struct {
	OrganizationID int32
	Name           string
	Host           string
	SqlPort        int32
	MetaPort       int32
}

func (q *Queries) CreateCluster(ctx context.Context, arg CreateClusterParams) (*Cluster, error) {
	row := q.db.QueryRow(ctx, createCluster,
		arg.OrganizationID,
		arg.Name,
		arg.Host,
		arg.SqlPort,
		arg.MetaPort,
	)
	var i Cluster
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Name,
		&i.Host,
		&i.SqlPort,
		&i.MetaPort,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteCluster = `-- name: DeleteCluster :exec
DELETE FROM clusters
WHERE id = $1
`

func (q *Queries) DeleteCluster(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteCluster, id)
	return err
}

const getCluster = `-- name: GetCluster :one
SELECT id, organization_id, name, host, sql_port, meta_port, created_at, updated_at FROM clusters
WHERE id = $1
`

func (q *Queries) GetCluster(ctx context.Context, id int32) (*Cluster, error) {
	row := q.db.QueryRow(ctx, getCluster, id)
	var i Cluster
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Name,
		&i.Host,
		&i.SqlPort,
		&i.MetaPort,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const listClusters = `-- name: ListClusters :many
SELECT id, organization_id, name, host, sql_port, meta_port, created_at, updated_at FROM clusters
WHERE organization_id = $1
ORDER BY name
`

func (q *Queries) ListClusters(ctx context.Context, organizationID int32) ([]*Cluster, error) {
	rows, err := q.db.Query(ctx, listClusters, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Cluster
	for rows.Next() {
		var i Cluster
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.Name,
			&i.Host,
			&i.SqlPort,
			&i.MetaPort,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCluster = `-- name: UpdateCluster :one
UPDATE clusters
SET
    name = $2,
    host = $3,
    sql_port = $4,
    meta_port = $5,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, organization_id, name, host, sql_port, meta_port, created_at, updated_at
`

type UpdateClusterParams struct {
	ID       int32
	Name     string
	Host     string
	SqlPort  int32
	MetaPort int32
}

func (q *Queries) UpdateCluster(ctx context.Context, arg UpdateClusterParams) (*Cluster, error) {
	row := q.db.QueryRow(ctx, updateCluster,
		arg.ID,
		arg.Name,
		arg.Host,
		arg.SqlPort,
		arg.MetaPort,
	)
	var i Cluster
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Name,
		&i.Host,
		&i.SqlPort,
		&i.MetaPort,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
