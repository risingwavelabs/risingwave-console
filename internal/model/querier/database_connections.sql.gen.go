// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: database_connections.sql

package querier

import (
	"context"
)

const createDatabaseConnection = `-- name: CreateDatabaseConnection :one
INSERT INTO database_connections (
    name,
    cluster_id,
    username,
    password,
    database,
    organization_id
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, organization_id, name, cluster_id, username, password, database, created_at, updated_at
`

type CreateDatabaseConnectionParams struct {
	Name           string
	ClusterID      int32
	Username       string
	Password       *string
	Database       string
	OrganizationID int32
}

func (q *Queries) CreateDatabaseConnection(ctx context.Context, arg CreateDatabaseConnectionParams) (*DatabaseConnection, error) {
	row := q.db.QueryRow(ctx, createDatabaseConnection,
		arg.Name,
		arg.ClusterID,
		arg.Username,
		arg.Password,
		arg.Database,
		arg.OrganizationID,
	)
	var i DatabaseConnection
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Name,
		&i.ClusterID,
		&i.Username,
		&i.Password,
		&i.Database,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteDatabaseConnection = `-- name: DeleteDatabaseConnection :exec
DELETE FROM database_connections
WHERE id = $1
`

func (q *Queries) DeleteDatabaseConnection(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteDatabaseConnection, id)
	return err
}

const getDatabaseConnection = `-- name: GetDatabaseConnection :one
SELECT id, organization_id, name, cluster_id, username, password, database, created_at, updated_at FROM database_connections
WHERE id = $1
`

func (q *Queries) GetDatabaseConnection(ctx context.Context, id int32) (*DatabaseConnection, error) {
	row := q.db.QueryRow(ctx, getDatabaseConnection, id)
	var i DatabaseConnection
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Name,
		&i.ClusterID,
		&i.Username,
		&i.Password,
		&i.Database,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getUserDatabaseByID = `-- name: GetUserDatabaseByID :one
SELECT id, organization_id, name, cluster_id, username, password, database, created_at, updated_at FROM database_connections
WHERE id = $1 AND organization_id = $2
`

type GetUserDatabaseByIDParams struct {
	ID             int32
	OrganizationID int32
}

func (q *Queries) GetUserDatabaseByID(ctx context.Context, arg GetUserDatabaseByIDParams) (*DatabaseConnection, error) {
	row := q.db.QueryRow(ctx, getUserDatabaseByID, arg.ID, arg.OrganizationID)
	var i DatabaseConnection
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Name,
		&i.ClusterID,
		&i.Username,
		&i.Password,
		&i.Database,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const listDatabaseConnections = `-- name: ListDatabaseConnections :many
SELECT id, organization_id, name, cluster_id, username, password, database, created_at, updated_at FROM database_connections
WHERE organization_id = $1
ORDER BY name
`

func (q *Queries) ListDatabaseConnections(ctx context.Context, organizationID int32) ([]*DatabaseConnection, error) {
	rows, err := q.db.Query(ctx, listDatabaseConnections, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*DatabaseConnection
	for rows.Next() {
		var i DatabaseConnection
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.Name,
			&i.ClusterID,
			&i.Username,
			&i.Password,
			&i.Database,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDatabaseConnection = `-- name: UpdateDatabaseConnection :one
UPDATE database_connections
SET
    name = $2,
    cluster_id = $3,
    username = $4,
    password = $5,
    database = $6,
    organization_id = $7,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, organization_id, name, cluster_id, username, password, database, created_at, updated_at
`

type UpdateDatabaseConnectionParams struct {
	ID             int32
	Name           string
	ClusterID      int32
	Username       string
	Password       *string
	Database       string
	OrganizationID int32
}

func (q *Queries) UpdateDatabaseConnection(ctx context.Context, arg UpdateDatabaseConnectionParams) (*DatabaseConnection, error) {
	row := q.db.QueryRow(ctx, updateDatabaseConnection,
		arg.ID,
		arg.Name,
		arg.ClusterID,
		arg.Username,
		arg.Password,
		arg.Database,
		arg.OrganizationID,
	)
	var i DatabaseConnection
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Name,
		&i.ClusterID,
		&i.Username,
		&i.Password,
		&i.Database,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
