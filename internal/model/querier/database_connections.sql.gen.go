// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: database_connections.sql

package querier

import (
	"context"
)

const createDatabaseConnection = `-- name: CreateDatabaseConnection :one
INSERT INTO database_connections (
    name,
    cluster_id,
    username,
    password,
    database,
    organization_id
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, organization_id, name, cluster_id, username, password, database, created_at, updated_at
`

type CreateDatabaseConnectionParams struct {
	Name           string
	ClusterID      int32
	Username       string
	Password       *string
	Database       string
	OrganizationID int32
}

func (q *Queries) CreateDatabaseConnection(ctx context.Context, arg CreateDatabaseConnectionParams) (*DatabaseConnection, error) {
	row := q.db.QueryRow(ctx, createDatabaseConnection,
		arg.Name,
		arg.ClusterID,
		arg.Username,
		arg.Password,
		arg.Database,
		arg.OrganizationID,
	)
	var i DatabaseConnection
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Name,
		&i.ClusterID,
		&i.Username,
		&i.Password,
		&i.Database,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteAllOrgDatabaseConnectionsByClusterID = `-- name: DeleteAllOrgDatabaseConnectionsByClusterID :exec
DELETE FROM database_connections
WHERE cluster_id = $1 AND organization_id = $2
`

type DeleteAllOrgDatabaseConnectionsByClusterIDParams struct {
	ClusterID      int32
	OrganizationID int32
}

func (q *Queries) DeleteAllOrgDatabaseConnectionsByClusterID(ctx context.Context, arg DeleteAllOrgDatabaseConnectionsByClusterIDParams) error {
	_, err := q.db.Exec(ctx, deleteAllOrgDatabaseConnectionsByClusterID, arg.ClusterID, arg.OrganizationID)
	return err
}

const deleteOrgDatabaseConnection = `-- name: DeleteOrgDatabaseConnection :exec
DELETE FROM database_connections
WHERE id = $1 AND organization_id = $2
`

type DeleteOrgDatabaseConnectionParams struct {
	ID             int32
	OrganizationID int32
}

func (q *Queries) DeleteOrgDatabaseConnection(ctx context.Context, arg DeleteOrgDatabaseConnectionParams) error {
	_, err := q.db.Exec(ctx, deleteOrgDatabaseConnection, arg.ID, arg.OrganizationID)
	return err
}

const getAllOrgDatabseConnectionsByClusterID = `-- name: GetAllOrgDatabseConnectionsByClusterID :many
SELECT id, organization_id, name, cluster_id, username, password, database, created_at, updated_at FROM database_connections
WHERE cluster_id = $1 AND organization_id = $2
`

type GetAllOrgDatabseConnectionsByClusterIDParams struct {
	ClusterID      int32
	OrganizationID int32
}

func (q *Queries) GetAllOrgDatabseConnectionsByClusterID(ctx context.Context, arg GetAllOrgDatabseConnectionsByClusterIDParams) ([]*DatabaseConnection, error) {
	rows, err := q.db.Query(ctx, getAllOrgDatabseConnectionsByClusterID, arg.ClusterID, arg.OrganizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*DatabaseConnection
	for rows.Next() {
		var i DatabaseConnection
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.Name,
			&i.ClusterID,
			&i.Username,
			&i.Password,
			&i.Database,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDatabaseConnectionByID = `-- name: GetDatabaseConnectionByID :one
SELECT id, organization_id, name, cluster_id, username, password, database, created_at, updated_at FROM database_connections
WHERE id = $1
`

func (q *Queries) GetDatabaseConnectionByID(ctx context.Context, id int32) (*DatabaseConnection, error) {
	row := q.db.QueryRow(ctx, getDatabaseConnectionByID, id)
	var i DatabaseConnection
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Name,
		&i.ClusterID,
		&i.Username,
		&i.Password,
		&i.Database,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getOrgDatabaseByID = `-- name: GetOrgDatabaseByID :one
SELECT id, organization_id, name, cluster_id, username, password, database, created_at, updated_at FROM database_connections
WHERE id = $1 AND organization_id = $2
`

type GetOrgDatabaseByIDParams struct {
	ID             int32
	OrganizationID int32
}

func (q *Queries) GetOrgDatabaseByID(ctx context.Context, arg GetOrgDatabaseByIDParams) (*DatabaseConnection, error) {
	row := q.db.QueryRow(ctx, getOrgDatabaseByID, arg.ID, arg.OrganizationID)
	var i DatabaseConnection
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Name,
		&i.ClusterID,
		&i.Username,
		&i.Password,
		&i.Database,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getOrgDatabaseConnection = `-- name: GetOrgDatabaseConnection :one
SELECT id, organization_id, name, cluster_id, username, password, database, created_at, updated_at FROM database_connections
WHERE id = $1 AND organization_id = $2
`

type GetOrgDatabaseConnectionParams struct {
	ID             int32
	OrganizationID int32
}

func (q *Queries) GetOrgDatabaseConnection(ctx context.Context, arg GetOrgDatabaseConnectionParams) (*DatabaseConnection, error) {
	row := q.db.QueryRow(ctx, getOrgDatabaseConnection, arg.ID, arg.OrganizationID)
	var i DatabaseConnection
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Name,
		&i.ClusterID,
		&i.Username,
		&i.Password,
		&i.Database,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const initDatabaseConnection = `-- name: InitDatabaseConnection :one
INSERT INTO database_connections (
    name,
    cluster_id,
    username,
    password,
    database,
    organization_id
) VALUES (
    $1, $2, $3, $4, $5, $6
) ON CONFLICT (organization_id, name) DO UPDATE 
    SET 
        cluster_id = EXCLUDED.cluster_id,
        username = EXCLUDED.username,
        password = EXCLUDED.password,
        database = EXCLUDED.database,
        updated_at = CURRENT_TIMESTAMP
RETURNING id, organization_id, name, cluster_id, username, password, database, created_at, updated_at
`

type InitDatabaseConnectionParams struct {
	Name           string
	ClusterID      int32
	Username       string
	Password       *string
	Database       string
	OrganizationID int32
}

func (q *Queries) InitDatabaseConnection(ctx context.Context, arg InitDatabaseConnectionParams) (*DatabaseConnection, error) {
	row := q.db.QueryRow(ctx, initDatabaseConnection,
		arg.Name,
		arg.ClusterID,
		arg.Username,
		arg.Password,
		arg.Database,
		arg.OrganizationID,
	)
	var i DatabaseConnection
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Name,
		&i.ClusterID,
		&i.Username,
		&i.Password,
		&i.Database,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const listOrgDatabaseConnections = `-- name: ListOrgDatabaseConnections :many
SELECT id, organization_id, name, cluster_id, username, password, database, created_at, updated_at FROM database_connections
WHERE organization_id = $1
ORDER BY name
`

func (q *Queries) ListOrgDatabaseConnections(ctx context.Context, organizationID int32) ([]*DatabaseConnection, error) {
	rows, err := q.db.Query(ctx, listOrgDatabaseConnections, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*DatabaseConnection
	for rows.Next() {
		var i DatabaseConnection
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.Name,
			&i.ClusterID,
			&i.Username,
			&i.Password,
			&i.Database,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrgDatabaseConnection = `-- name: UpdateOrgDatabaseConnection :one
UPDATE database_connections
SET
    name = $3,
    cluster_id = $4,
    username = $5,
    password = $6,
    database = $7,
    organization_id = $8,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND organization_id = $2
RETURNING id, organization_id, name, cluster_id, username, password, database, created_at, updated_at
`

type UpdateOrgDatabaseConnectionParams struct {
	ID               int32
	OrganizationID   int32
	Name             string
	ClusterID        int32
	Username         string
	Password         *string
	Database         string
	OrganizationID_2 int32
}

func (q *Queries) UpdateOrgDatabaseConnection(ctx context.Context, arg UpdateOrgDatabaseConnectionParams) (*DatabaseConnection, error) {
	row := q.db.QueryRow(ctx, updateOrgDatabaseConnection,
		arg.ID,
		arg.OrganizationID,
		arg.Name,
		arg.ClusterID,
		arg.Username,
		arg.Password,
		arg.Database,
		arg.OrganizationID_2,
	)
	var i DatabaseConnection
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Name,
		&i.ClusterID,
		&i.Username,
		&i.Password,
		&i.Database,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
