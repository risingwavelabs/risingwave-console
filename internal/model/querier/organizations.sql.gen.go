// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: organizations.sql

package querier

import (
	"context"
)

const createOrganization = `-- name: CreateOrganization :one
INSERT INTO organizations (
    name
) VALUES (
    $1
) ON CONFLICT DO NOTHING RETURNING id, name, created_at, updated_at, owner_id
`

func (q *Queries) CreateOrganization(ctx context.Context, name string) (*Organization, error) {
	row := q.db.QueryRow(ctx, createOrganization, name)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OwnerID,
	)
	return &i, err
}

const deleteOrganization = `-- name: DeleteOrganization :exec
DELETE FROM organizations
WHERE id = $1
`

func (q *Queries) DeleteOrganization(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteOrganization, id)
	return err
}

const getOrganization = `-- name: GetOrganization :one
SELECT id, name, created_at, updated_at, owner_id FROM organizations
WHERE id = $1
`

func (q *Queries) GetOrganization(ctx context.Context, id int32) (*Organization, error) {
	row := q.db.QueryRow(ctx, getOrganization, id)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OwnerID,
	)
	return &i, err
}

const listOrganizations = `-- name: ListOrganizations :many
SELECT id, name, created_at, updated_at, owner_id FROM organizations
ORDER BY name
`

func (q *Queries) ListOrganizations(ctx context.Context) ([]*Organization, error) {
	rows, err := q.db.Query(ctx, listOrganizations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.OwnerID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrganization = `-- name: UpdateOrganization :one
UPDATE organizations
SET
    name = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, name, created_at, updated_at, owner_id
`

type UpdateOrganizationParams struct {
	ID   int32
	Name string
}

func (q *Queries) UpdateOrganization(ctx context.Context, arg UpdateOrganizationParams) (*Organization, error) {
	row := q.db.QueryRow(ctx, updateOrganization, arg.ID, arg.Name)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OwnerID,
	)
	return &i, err
}
