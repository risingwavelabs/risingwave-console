// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: refresh_token.sql

package querier

import (
	"context"
)

const deleteRefreshToken = `-- name: DeleteRefreshToken :exec
DELETE FROM refresh_tokens
WHERE user_id = $1 AND token = $2
`

type DeleteRefreshTokenParams struct {
	UserID int32
	Token  string
}

func (q *Queries) DeleteRefreshToken(ctx context.Context, arg DeleteRefreshTokenParams) error {
	_, err := q.db.Exec(ctx, deleteRefreshToken, arg.UserID, arg.Token)
	return err
}

const getRefreshToken = `-- name: GetRefreshToken :one
SELECT id, user_id, token, created_at, updated_at FROM refresh_tokens
WHERE user_id = $1 AND token = $2
`

type GetRefreshTokenParams struct {
	UserID int32
	Token  string
}

func (q *Queries) GetRefreshToken(ctx context.Context, arg GetRefreshTokenParams) (*RefreshToken, error) {
	row := q.db.QueryRow(ctx, getRefreshToken, arg.UserID, arg.Token)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const upsertRefreshToken = `-- name: UpsertRefreshToken :exec
INSERT INTO refresh_tokens (user_id, token)
VALUES ($1, $2) ON CONFLICT (user_id, token) DO UPDATE SET token = EXCLUDED.token, updated_at = CURRENT_TIMESTAMP
`

type UpsertRefreshTokenParams struct {
	UserID int32
	Token  string
}

func (q *Queries) UpsertRefreshToken(ctx context.Context, arg UpsertRefreshTokenParams) error {
	_, err := q.db.Exec(ctx, upsertRefreshToken, arg.UserID, arg.Token)
	return err
}
