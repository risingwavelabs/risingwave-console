// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package querier

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    name,
    password_hash,
    password_salt,
    organization_id
) VALUES (
    $1, $2, $3, $4
) ON CONFLICT (name) DO UPDATE 
    SET updated_at = CURRENT_TIMESTAMP, 
        name = EXCLUDED.name, 
        password_hash = EXCLUDED.password_hash,
        password_salt = EXCLUDED.password_salt
RETURNING id, name, password_hash, password_salt, organization_id, created_at, updated_at
`

type CreateUserParams struct {
	Name           string
	PasswordHash   string
	PasswordSalt   string
	OrganizationID int32
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (*User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.PasswordHash,
		arg.PasswordSalt,
		arg.OrganizationID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PasswordHash,
		&i.PasswordSalt,
		&i.OrganizationID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteUserByName = `-- name: DeleteUserByName :exec
DELETE FROM users
WHERE name = $1
`

func (q *Queries) DeleteUserByName(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, deleteUserByName, name)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, name, password_hash, password_salt, organization_id, created_at, updated_at FROM users
WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (*User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PasswordHash,
		&i.PasswordSalt,
		&i.OrganizationID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT id, name, password_hash, password_salt, organization_id, created_at, updated_at FROM users
WHERE name = $1
`

func (q *Queries) GetUserByName(ctx context.Context, name string) (*User, error) {
	row := q.db.QueryRow(ctx, getUserByName, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PasswordHash,
		&i.PasswordSalt,
		&i.OrganizationID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
