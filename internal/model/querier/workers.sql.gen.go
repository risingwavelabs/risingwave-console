// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: workers.sql

package querier

import (
	"context"
	"time"

	"github.com/risingwavelabs/wavekit/internal/apigen"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (spec, status, started_at)
VALUES ($1, $2, $3)
RETURNING id, spec, status, timeout, started_at, created_at, updated_at
`

type CreateTaskParams struct {
	Spec      apigen.TaskSpec
	Status    string
	StartedAt *time.Time
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (*Task, error) {
	row := q.db.QueryRow(ctx, createTask, arg.Spec, arg.Status, arg.StartedAt)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Spec,
		&i.Status,
		&i.Timeout,
		&i.StartedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const insertEvent = `-- name: InsertEvent :one
INSERT INTO events (spec)
VALUES ($1)
RETURNING id, spec, created_at
`

func (q *Queries) InsertEvent(ctx context.Context, spec apigen.EventSpec) (*Event, error) {
	row := q.db.QueryRow(ctx, insertEvent, spec)
	var i Event
	err := row.Scan(&i.ID, &i.Spec, &i.CreatedAt)
	return &i, err
}

const pullTask = `-- name: PullTask :one
SELECT id, spec, status, timeout, started_at, created_at, updated_at FROM tasks
WHERE 
    status = 'pending'
    AND (
        started_at IS NULL OR started_at < NOW()
    )
ORDER BY created_at ASC
FOR UPDATE SKIP LOCKED
LIMIT 1
`

func (q *Queries) PullTask(ctx context.Context) (*Task, error) {
	row := q.db.QueryRow(ctx, pullTask)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Spec,
		&i.Status,
		&i.Timeout,
		&i.StartedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const updateTaskSpec = `-- name: UpdateTaskSpec :exec
UPDATE tasks
SET spec = $2, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdateTaskSpecParams struct {
	ID   int32
	Spec apigen.TaskSpec
}

func (q *Queries) UpdateTaskSpec(ctx context.Context, arg UpdateTaskSpecParams) error {
	_, err := q.db.Exec(ctx, updateTaskSpec, arg.ID, arg.Spec)
	return err
}

const updateTaskStatus = `-- name: UpdateTaskStatus :exec
UPDATE tasks
SET 
    status = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdateTaskStatusParams struct {
	ID     int32
	Status string
}

func (q *Queries) UpdateTaskStatus(ctx context.Context, arg UpdateTaskStatusParams) error {
	_, err := q.db.Exec(ctx, updateTaskStatus, arg.ID, arg.Status)
	return err
}
