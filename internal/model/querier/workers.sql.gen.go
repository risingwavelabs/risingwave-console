// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: workers.sql

package querier

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/risingwavelabs/wavekit/internal/apigen"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (worker_name, spec, status, remaining, started_at)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, worker_name, spec, status, timeout, remaining, started_at, created_at, updated_at
`

type CreateTaskParams struct {
	WorkerName *string
	Spec       apigen.TaskSpec
	Status     string
	Remaining  *int32
	StartedAt  pgtype.Timestamp
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (*Task, error) {
	row := q.db.QueryRow(ctx, createTask,
		arg.WorkerName,
		arg.Spec,
		arg.Status,
		arg.Remaining,
		arg.StartedAt,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.WorkerName,
		&i.Spec,
		&i.Status,
		&i.Timeout,
		&i.Remaining,
		&i.StartedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const insertEvent = `-- name: InsertEvent :one
INSERT INTO events (spec)
VALUES ($1)
RETURNING id, spec, created_at
`

func (q *Queries) InsertEvent(ctx context.Context, spec apigen.EventSpec) (*Event, error) {
	row := q.db.QueryRow(ctx, insertEvent, spec)
	var i Event
	err := row.Scan(&i.ID, &i.Spec, &i.CreatedAt)
	return &i, err
}

const lockTask = `-- name: LockTask :one
UPDATE tasks
SET 
    status = 'running',
    worker_name = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, worker_name, spec, status, timeout, remaining, started_at, created_at, updated_at
`

type LockTaskParams struct {
	ID         int32
	WorkerName *string
}

func (q *Queries) LockTask(ctx context.Context, arg LockTaskParams) (*Task, error) {
	row := q.db.QueryRow(ctx, lockTask, arg.ID, arg.WorkerName)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.WorkerName,
		&i.Spec,
		&i.Status,
		&i.Timeout,
		&i.Remaining,
		&i.StartedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const pullTask = `-- name: PullTask :one
SELECT id, worker_name, spec, status, timeout, remaining, started_at, created_at, updated_at FROM tasks
WHERE 
    (remaning IS NULL OR remaning > 0)
    AND (
        (worker_name IS NULL AND status = 'pending')
        OR
        (worker_name = $1 AND (status = 'running' OR status = 'pending'))
    )
    AND (
        started_at IS NULL OR started_at < NOW()
    )
ORDER BY created_at ASC
FOR UPDATE SKIP LOCKED
LIMIT 1
`

func (q *Queries) PullTask(ctx context.Context, workerName *string) (*Task, error) {
	row := q.db.QueryRow(ctx, pullTask, workerName)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.WorkerName,
		&i.Spec,
		&i.Status,
		&i.Timeout,
		&i.Remaining,
		&i.StartedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const sendWorkerHeartbeat = `-- name: SendWorkerHeartbeat :exec
INSERT INTO workers (worker_name, last_heartbeat)
VALUES ($1, $2)
ON CONFLICT (worker_name) DO UPDATE SET last_heartbeat = $2
`

type SendWorkerHeartbeatParams struct {
	WorkerName    *string
	LastHeartbeat pgtype.Timestamp
}

func (q *Queries) SendWorkerHeartbeat(ctx context.Context, arg SendWorkerHeartbeatParams) error {
	_, err := q.db.Exec(ctx, sendWorkerHeartbeat, arg.WorkerName, arg.LastHeartbeat)
	return err
}

const updateTaskMetadata = `-- name: UpdateTaskMetadata :one
UPDATE tasks
SET 
    status = $2, 
    remaining = $3, 
    started_at = $4,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, worker_name, spec, status, timeout, remaining, started_at, created_at, updated_at
`

type UpdateTaskMetadataParams struct {
	ID        int32
	Status    string
	Remaining *int32
	StartedAt pgtype.Timestamp
}

func (q *Queries) UpdateTaskMetadata(ctx context.Context, arg UpdateTaskMetadataParams) (*Task, error) {
	row := q.db.QueryRow(ctx, updateTaskMetadata,
		arg.ID,
		arg.Status,
		arg.Remaining,
		arg.StartedAt,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.WorkerName,
		&i.Spec,
		&i.Status,
		&i.Timeout,
		&i.Remaining,
		&i.StartedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const updateTaskSpec = `-- name: UpdateTaskSpec :one
UPDATE tasks
SET spec = $2, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, worker_name, spec, status, timeout, remaining, started_at, created_at, updated_at
`

type UpdateTaskSpecParams struct {
	ID   int32
	Spec apigen.TaskSpec
}

func (q *Queries) UpdateTaskSpec(ctx context.Context, arg UpdateTaskSpecParams) (*Task, error) {
	row := q.db.QueryRow(ctx, updateTaskSpec, arg.ID, arg.Spec)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.WorkerName,
		&i.Spec,
		&i.Status,
		&i.Timeout,
		&i.Remaining,
		&i.StartedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
