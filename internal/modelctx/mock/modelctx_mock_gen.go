// Code generated by MockGen. DO NOT EDIT.
// Source: internal/modelctx/modelctx.go
//
// Generated by this command:
//
//	mockgen -source=internal/modelctx/modelctx.go -destination=internal/modelctx/mock/modelctx_mock_gen.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	apigen "github.com/risingwavelabs/wavekit/internal/apigen"
	gomock "go.uber.org/mock/gomock"
)

// MockModelContextInterface is a mock of ModelContextInterface interface.
type MockModelContextInterface struct {
	ctrl     *gomock.Controller
	recorder *MockModelContextInterfaceMockRecorder
	isgomock struct{}
}

// MockModelContextInterfaceMockRecorder is the mock recorder for MockModelContextInterface.
type MockModelContextInterfaceMockRecorder struct {
	mock *MockModelContextInterface
}

// NewMockModelContextInterface creates a new mock instance.
func NewMockModelContextInterface(ctrl *gomock.Controller) *MockModelContextInterface {
	mock := &MockModelContextInterface{ctrl: ctrl}
	mock.recorder = &MockModelContextInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelContextInterface) EXPECT() *MockModelContextInterfaceMockRecorder {
	return m.recorder
}

// CreateCronJob mocks base method.
func (m *MockModelContextInterface) CreateCronJob(ctx context.Context, timeoutDuration *string, orgID *int32, cronExpression string, specType apigen.TaskSpec) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCronJob", ctx, timeoutDuration, orgID, cronExpression, specType)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCronJob indicates an expected call of CreateCronJob.
func (mr *MockModelContextInterfaceMockRecorder) CreateCronJob(ctx, timeoutDuration, orgID, cronExpression, specType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCronJob", reflect.TypeOf((*MockModelContextInterface)(nil).CreateCronJob), ctx, timeoutDuration, orgID, cronExpression, specType)
}

// PauseCronJob mocks base method.
func (m *MockModelContextInterface) PauseCronJob(ctx context.Context, taskID int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PauseCronJob", ctx, taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// PauseCronJob indicates an expected call of PauseCronJob.
func (mr *MockModelContextInterfaceMockRecorder) PauseCronJob(ctx, taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseCronJob", reflect.TypeOf((*MockModelContextInterface)(nil).PauseCronJob), ctx, taskID)
}

// ResumeCronJob mocks base method.
func (m *MockModelContextInterface) ResumeCronJob(ctx context.Context, taskID int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeCronJob", ctx, taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResumeCronJob indicates an expected call of ResumeCronJob.
func (mr *MockModelContextInterfaceMockRecorder) ResumeCronJob(ctx, taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeCronJob", reflect.TypeOf((*MockModelContextInterface)(nil).ResumeCronJob), ctx, taskID)
}

// UpdateCronJob mocks base method.
func (m *MockModelContextInterface) UpdateCronJob(ctx context.Context, taskID int32, timeoutDuration *string, orgID *int32, cronExpression string, specType apigen.TaskSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCronJob", ctx, taskID, timeoutDuration, orgID, cronExpression, specType)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCronJob indicates an expected call of UpdateCronJob.
func (mr *MockModelContextInterfaceMockRecorder) UpdateCronJob(ctx, taskID, timeoutDuration, orgID, cronExpression, specType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCronJob", reflect.TypeOf((*MockModelContextInterface)(nil).UpdateCronJob), ctx, taskID, timeoutDuration, orgID, cronExpression, specType)
}
