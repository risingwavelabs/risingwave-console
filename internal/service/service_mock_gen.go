// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/service.go -destination=internal/service/service_mock_gen.go -package=service
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	model "github.com/prometheus/common/model"
	apigen "github.com/risingwavelabs/wavekit/internal/apigen"
	gomock "go.uber.org/mock/gomock"
)

// MockServiceInterface is a mock of ServiceInterface interface.
type MockServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockServiceInterfaceMockRecorder is the mock recorder for MockServiceInterface.
type MockServiceInterfaceMockRecorder struct {
	mock *MockServiceInterface
}

// NewMockServiceInterface creates a new mock instance.
func NewMockServiceInterface(ctrl *gomock.Controller) *MockServiceInterface {
	mock := &MockServiceInterface{ctrl: ctrl}
	mock.recorder = &MockServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInterface) EXPECT() *MockServiceInterfaceMockRecorder {
	return m.recorder
}

// CancelDDLProgress mocks base method.
func (m *MockServiceInterface) CancelDDLProgress(ctx context.Context, id int32, ddlID int64, orgID int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelDDLProgress", ctx, id, ddlID, orgID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelDDLProgress indicates an expected call of CancelDDLProgress.
func (mr *MockServiceInterfaceMockRecorder) CancelDDLProgress(ctx, id, ddlID, orgID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelDDLProgress", reflect.TypeOf((*MockServiceInterface)(nil).CancelDDLProgress), ctx, id, ddlID, orgID)
}

// CreateClusterDiagnostic mocks base method.
func (m *MockServiceInterface) CreateClusterDiagnostic(ctx context.Context, id, orgID int32) (*apigen.DiagnosticData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClusterDiagnostic", ctx, id, orgID)
	ret0, _ := ret[0].(*apigen.DiagnosticData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClusterDiagnostic indicates an expected call of CreateClusterDiagnostic.
func (mr *MockServiceInterfaceMockRecorder) CreateClusterDiagnostic(ctx, id, orgID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterDiagnostic", reflect.TypeOf((*MockServiceInterface)(nil).CreateClusterDiagnostic), ctx, id, orgID)
}

// CreateClusterSnapshot mocks base method.
func (m *MockServiceInterface) CreateClusterSnapshot(ctx context.Context, id int32, name string, orgID int32) (*apigen.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClusterSnapshot", ctx, id, name, orgID)
	ret0, _ := ret[0].(*apigen.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClusterSnapshot indicates an expected call of CreateClusterSnapshot.
func (mr *MockServiceInterfaceMockRecorder) CreateClusterSnapshot(ctx, id, name, orgID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterSnapshot", reflect.TypeOf((*MockServiceInterface)(nil).CreateClusterSnapshot), ctx, id, name, orgID)
}

// CreateNewUser mocks base method.
func (m *MockServiceInterface) CreateNewUser(ctx context.Context, username, password string) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewUser", ctx, username, password)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewUser indicates an expected call of CreateNewUser.
func (mr *MockServiceInterfaceMockRecorder) CreateNewUser(ctx, username, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewUser", reflect.TypeOf((*MockServiceInterface)(nil).CreateNewUser), ctx, username, password)
}

// DeleteCluster mocks base method.
func (m *MockServiceInterface) DeleteCluster(ctx context.Context, id int32, cascade bool, orgID int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCluster", ctx, id, cascade, orgID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockServiceInterfaceMockRecorder) DeleteCluster(ctx, id, cascade, orgID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockServiceInterface)(nil).DeleteCluster), ctx, id, cascade, orgID)
}

// DeleteClusterSnapshot mocks base method.
func (m *MockServiceInterface) DeleteClusterSnapshot(ctx context.Context, id int32, snapshotID int64, orgID int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterSnapshot", ctx, id, snapshotID, orgID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterSnapshot indicates an expected call of DeleteClusterSnapshot.
func (mr *MockServiceInterfaceMockRecorder) DeleteClusterSnapshot(ctx, id, snapshotID, orgID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterSnapshot", reflect.TypeOf((*MockServiceInterface)(nil).DeleteClusterSnapshot), ctx, id, snapshotID, orgID)
}

// DeleteDatabase mocks base method.
func (m *MockServiceInterface) DeleteDatabase(ctx context.Context, id, orgID int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDatabase", ctx, id, orgID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDatabase indicates an expected call of DeleteDatabase.
func (mr *MockServiceInterfaceMockRecorder) DeleteDatabase(ctx, id, orgID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatabase", reflect.TypeOf((*MockServiceInterface)(nil).DeleteDatabase), ctx, id, orgID)
}

// DeleteMetricsStore mocks base method.
func (m *MockServiceInterface) DeleteMetricsStore(ctx context.Context, id, organizationID int32, force bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMetricsStore", ctx, id, organizationID, force)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMetricsStore indicates an expected call of DeleteMetricsStore.
func (mr *MockServiceInterfaceMockRecorder) DeleteMetricsStore(ctx, id, organizationID, force any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMetricsStore", reflect.TypeOf((*MockServiceInterface)(nil).DeleteMetricsStore), ctx, id, organizationID, force)
}

// GetCluster mocks base method.
func (m *MockServiceInterface) GetCluster(ctx context.Context, id, orgID int32) (*apigen.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCluster", ctx, id, orgID)
	ret0, _ := ret[0].(*apigen.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockServiceInterfaceMockRecorder) GetCluster(ctx, id, orgID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockServiceInterface)(nil).GetCluster), ctx, id, orgID)
}

// GetClusterAutoBackupConfig mocks base method.
func (m *MockServiceInterface) GetClusterAutoBackupConfig(ctx context.Context, id, orgID int32) (*apigen.AutoBackupConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterAutoBackupConfig", ctx, id, orgID)
	ret0, _ := ret[0].(*apigen.AutoBackupConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterAutoBackupConfig indicates an expected call of GetClusterAutoBackupConfig.
func (mr *MockServiceInterfaceMockRecorder) GetClusterAutoBackupConfig(ctx, id, orgID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterAutoBackupConfig", reflect.TypeOf((*MockServiceInterface)(nil).GetClusterAutoBackupConfig), ctx, id, orgID)
}

// GetClusterAutoDiagnosticConfig mocks base method.
func (m *MockServiceInterface) GetClusterAutoDiagnosticConfig(ctx context.Context, id, orgID int32) (*apigen.AutoDiagnosticConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterAutoDiagnosticConfig", ctx, id, orgID)
	ret0, _ := ret[0].(*apigen.AutoDiagnosticConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterAutoDiagnosticConfig indicates an expected call of GetClusterAutoDiagnosticConfig.
func (mr *MockServiceInterfaceMockRecorder) GetClusterAutoDiagnosticConfig(ctx, id, orgID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterAutoDiagnosticConfig", reflect.TypeOf((*MockServiceInterface)(nil).GetClusterAutoDiagnosticConfig), ctx, id, orgID)
}

// GetClusterDiagnostic mocks base method.
func (m *MockServiceInterface) GetClusterDiagnostic(ctx context.Context, id, diagnosticID, orgID int32) (*apigen.DiagnosticData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterDiagnostic", ctx, id, diagnosticID, orgID)
	ret0, _ := ret[0].(*apigen.DiagnosticData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterDiagnostic indicates an expected call of GetClusterDiagnostic.
func (mr *MockServiceInterfaceMockRecorder) GetClusterDiagnostic(ctx, id, diagnosticID, orgID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterDiagnostic", reflect.TypeOf((*MockServiceInterface)(nil).GetClusterDiagnostic), ctx, id, diagnosticID, orgID)
}

// GetDDLProgress mocks base method.
func (m *MockServiceInterface) GetDDLProgress(ctx context.Context, id, orgID int32) ([]apigen.DDLProgress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDDLProgress", ctx, id, orgID)
	ret0, _ := ret[0].([]apigen.DDLProgress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDDLProgress indicates an expected call of GetDDLProgress.
func (mr *MockServiceInterfaceMockRecorder) GetDDLProgress(ctx, id, orgID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDDLProgress", reflect.TypeOf((*MockServiceInterface)(nil).GetDDLProgress), ctx, id, orgID)
}

// GetDatabase mocks base method.
func (m *MockServiceInterface) GetDatabase(ctx context.Context, id, orgID int32) (*apigen.Database, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatabase", ctx, id, orgID)
	ret0, _ := ret[0].(*apigen.Database)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatabase indicates an expected call of GetDatabase.
func (mr *MockServiceInterfaceMockRecorder) GetDatabase(ctx, id, orgID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatabase", reflect.TypeOf((*MockServiceInterface)(nil).GetDatabase), ctx, id, orgID)
}

// GetMaterializedViewThroughput mocks base method.
func (m *MockServiceInterface) GetMaterializedViewThroughput(ctx context.Context, clusterID int32) (model.Matrix, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaterializedViewThroughput", ctx, clusterID)
	ret0, _ := ret[0].(model.Matrix)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaterializedViewThroughput indicates an expected call of GetMaterializedViewThroughput.
func (mr *MockServiceInterfaceMockRecorder) GetMaterializedViewThroughput(ctx, clusterID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaterializedViewThroughput", reflect.TypeOf((*MockServiceInterface)(nil).GetMaterializedViewThroughput), ctx, clusterID)
}

// GetMetricsStore mocks base method.
func (m *MockServiceInterface) GetMetricsStore(ctx context.Context, id, organizationID int32) (*apigen.MetricsStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricsStore", ctx, id, organizationID)
	ret0, _ := ret[0].(*apigen.MetricsStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricsStore indicates an expected call of GetMetricsStore.
func (mr *MockServiceInterfaceMockRecorder) GetMetricsStore(ctx, id, organizationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricsStore", reflect.TypeOf((*MockServiceInterface)(nil).GetMetricsStore), ctx, id, organizationID)
}

// ImportCluster mocks base method.
func (m *MockServiceInterface) ImportCluster(ctx context.Context, params apigen.ClusterImport, orgID int32) (*apigen.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportCluster", ctx, params, orgID)
	ret0, _ := ret[0].(*apigen.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportCluster indicates an expected call of ImportCluster.
func (mr *MockServiceInterfaceMockRecorder) ImportCluster(ctx, params, orgID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportCluster", reflect.TypeOf((*MockServiceInterface)(nil).ImportCluster), ctx, params, orgID)
}

// ImportDatabase mocks base method.
func (m *MockServiceInterface) ImportDatabase(ctx context.Context, params apigen.DatabaseConnectInfo, orgID int32) (*apigen.Database, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportDatabase", ctx, params, orgID)
	ret0, _ := ret[0].(*apigen.Database)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportDatabase indicates an expected call of ImportDatabase.
func (mr *MockServiceInterfaceMockRecorder) ImportDatabase(ctx, params, orgID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportDatabase", reflect.TypeOf((*MockServiceInterface)(nil).ImportDatabase), ctx, params, orgID)
}

// ImportMetricsStore mocks base method.
func (m *MockServiceInterface) ImportMetricsStore(arg0 context.Context, arg1 apigen.MetricsStoreImport, arg2 int32) (*apigen.MetricsStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportMetricsStore", arg0, arg1, arg2)
	ret0, _ := ret[0].(*apigen.MetricsStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportMetricsStore indicates an expected call of ImportMetricsStore.
func (mr *MockServiceInterfaceMockRecorder) ImportMetricsStore(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportMetricsStore", reflect.TypeOf((*MockServiceInterface)(nil).ImportMetricsStore), arg0, arg1, arg2)
}

// ListClusterDiagnostics mocks base method.
func (m *MockServiceInterface) ListClusterDiagnostics(ctx context.Context, id, orgID int32) ([]apigen.DiagnosticData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusterDiagnostics", ctx, id, orgID)
	ret0, _ := ret[0].([]apigen.DiagnosticData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusterDiagnostics indicates an expected call of ListClusterDiagnostics.
func (mr *MockServiceInterfaceMockRecorder) ListClusterDiagnostics(ctx, id, orgID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusterDiagnostics", reflect.TypeOf((*MockServiceInterface)(nil).ListClusterDiagnostics), ctx, id, orgID)
}

// ListClusterSnapshots mocks base method.
func (m *MockServiceInterface) ListClusterSnapshots(ctx context.Context, id, orgID int32) ([]apigen.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusterSnapshots", ctx, id, orgID)
	ret0, _ := ret[0].([]apigen.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusterSnapshots indicates an expected call of ListClusterSnapshots.
func (mr *MockServiceInterfaceMockRecorder) ListClusterSnapshots(ctx, id, orgID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusterSnapshots", reflect.TypeOf((*MockServiceInterface)(nil).ListClusterSnapshots), ctx, id, orgID)
}

// ListClusterVersions mocks base method.
func (m *MockServiceInterface) ListClusterVersions(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusterVersions", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusterVersions indicates an expected call of ListClusterVersions.
func (mr *MockServiceInterfaceMockRecorder) ListClusterVersions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusterVersions", reflect.TypeOf((*MockServiceInterface)(nil).ListClusterVersions), ctx)
}

// ListClusters mocks base method.
func (m *MockServiceInterface) ListClusters(ctx context.Context, orgID int32) ([]*apigen.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusters", ctx, orgID)
	ret0, _ := ret[0].([]*apigen.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusters indicates an expected call of ListClusters.
func (mr *MockServiceInterfaceMockRecorder) ListClusters(ctx, orgID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusters", reflect.TypeOf((*MockServiceInterface)(nil).ListClusters), ctx, orgID)
}

// ListClustersByMetricsStoreID mocks base method.
func (m *MockServiceInterface) ListClustersByMetricsStoreID(ctx context.Context, id int32) ([]*apigen.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClustersByMetricsStoreID", ctx, id)
	ret0, _ := ret[0].([]*apigen.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClustersByMetricsStoreID indicates an expected call of ListClustersByMetricsStoreID.
func (mr *MockServiceInterfaceMockRecorder) ListClustersByMetricsStoreID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClustersByMetricsStoreID", reflect.TypeOf((*MockServiceInterface)(nil).ListClustersByMetricsStoreID), ctx, id)
}

// ListDatabases mocks base method.
func (m *MockServiceInterface) ListDatabases(ctx context.Context, orgID int32) ([]apigen.Database, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatabases", ctx, orgID)
	ret0, _ := ret[0].([]apigen.Database)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatabases indicates an expected call of ListDatabases.
func (mr *MockServiceInterfaceMockRecorder) ListDatabases(ctx, orgID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatabases", reflect.TypeOf((*MockServiceInterface)(nil).ListDatabases), ctx, orgID)
}

// ListMetricsStores mocks base method.
func (m *MockServiceInterface) ListMetricsStores(ctx context.Context, organizationID int32) ([]*apigen.MetricsStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMetricsStores", ctx, organizationID)
	ret0, _ := ret[0].([]*apigen.MetricsStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMetricsStores indicates an expected call of ListMetricsStores.
func (mr *MockServiceInterfaceMockRecorder) ListMetricsStores(ctx, organizationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetricsStores", reflect.TypeOf((*MockServiceInterface)(nil).ListMetricsStores), ctx, organizationID)
}

// QueryDatabase mocks base method.
func (m *MockServiceInterface) QueryDatabase(ctx context.Context, id int32, params apigen.QueryRequest, orgID int32, backgroundDDL bool) (*apigen.QueryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryDatabase", ctx, id, params, orgID, backgroundDDL)
	ret0, _ := ret[0].(*apigen.QueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryDatabase indicates an expected call of QueryDatabase.
func (mr *MockServiceInterfaceMockRecorder) QueryDatabase(ctx, id, params, orgID, backgroundDDL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryDatabase", reflect.TypeOf((*MockServiceInterface)(nil).QueryDatabase), ctx, id, params, orgID, backgroundDDL)
}

// RefreshToken mocks base method.
func (m *MockServiceInterface) RefreshToken(ctx context.Context, userID int32, refreshToken string) (*apigen.Credentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", ctx, userID, refreshToken)
	ret0, _ := ret[0].(*apigen.Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockServiceInterfaceMockRecorder) RefreshToken(ctx, userID, refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockServiceInterface)(nil).RefreshToken), ctx, userID, refreshToken)
}

// RunRisectlCommand mocks base method.
func (m *MockServiceInterface) RunRisectlCommand(ctx context.Context, id int32, params apigen.RisectlCommand, orgID int32) (*apigen.RisectlCommandResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunRisectlCommand", ctx, id, params, orgID)
	ret0, _ := ret[0].(*apigen.RisectlCommandResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunRisectlCommand indicates an expected call of RunRisectlCommand.
func (mr *MockServiceInterfaceMockRecorder) RunRisectlCommand(ctx, id, params, orgID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunRisectlCommand", reflect.TypeOf((*MockServiceInterface)(nil).RunRisectlCommand), ctx, id, params, orgID)
}

// SignIn mocks base method.
func (m *MockServiceInterface) SignIn(ctx context.Context, params apigen.SignInRequest) (*apigen.Credentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", ctx, params)
	ret0, _ := ret[0].(*apigen.Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockServiceInterfaceMockRecorder) SignIn(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockServiceInterface)(nil).SignIn), ctx, params)
}

// TestClusterConnection mocks base method.
func (m *MockServiceInterface) TestClusterConnection(ctx context.Context, params apigen.TestClusterConnectionPayload, orgID int32) (*apigen.TestClusterConnectionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestClusterConnection", ctx, params, orgID)
	ret0, _ := ret[0].(*apigen.TestClusterConnectionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestClusterConnection indicates an expected call of TestClusterConnection.
func (mr *MockServiceInterfaceMockRecorder) TestClusterConnection(ctx, params, orgID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestClusterConnection", reflect.TypeOf((*MockServiceInterface)(nil).TestClusterConnection), ctx, params, orgID)
}

// TestDatabaseConnection mocks base method.
func (m *MockServiceInterface) TestDatabaseConnection(ctx context.Context, params apigen.TestDatabaseConnectionPayload, orgID int32) (*apigen.TestDatabaseConnectionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestDatabaseConnection", ctx, params, orgID)
	ret0, _ := ret[0].(*apigen.TestDatabaseConnectionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestDatabaseConnection indicates an expected call of TestDatabaseConnection.
func (mr *MockServiceInterfaceMockRecorder) TestDatabaseConnection(ctx, params, orgID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestDatabaseConnection", reflect.TypeOf((*MockServiceInterface)(nil).TestDatabaseConnection), ctx, params, orgID)
}

// UpdateCluster mocks base method.
func (m *MockServiceInterface) UpdateCluster(ctx context.Context, id int32, params apigen.ClusterImport, orgID int32) (*apigen.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCluster", ctx, id, params, orgID)
	ret0, _ := ret[0].(*apigen.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCluster indicates an expected call of UpdateCluster.
func (mr *MockServiceInterfaceMockRecorder) UpdateCluster(ctx, id, params, orgID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCluster", reflect.TypeOf((*MockServiceInterface)(nil).UpdateCluster), ctx, id, params, orgID)
}

// UpdateClusterAutoBackupConfig mocks base method.
func (m *MockServiceInterface) UpdateClusterAutoBackupConfig(ctx context.Context, id int32, params apigen.AutoBackupConfig, orgID int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterAutoBackupConfig", ctx, id, params, orgID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClusterAutoBackupConfig indicates an expected call of UpdateClusterAutoBackupConfig.
func (mr *MockServiceInterfaceMockRecorder) UpdateClusterAutoBackupConfig(ctx, id, params, orgID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterAutoBackupConfig", reflect.TypeOf((*MockServiceInterface)(nil).UpdateClusterAutoBackupConfig), ctx, id, params, orgID)
}

// UpdateClusterAutoDiagnosticConfig mocks base method.
func (m *MockServiceInterface) UpdateClusterAutoDiagnosticConfig(ctx context.Context, id int32, params apigen.AutoDiagnosticConfig, orgID int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterAutoDiagnosticConfig", ctx, id, params, orgID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClusterAutoDiagnosticConfig indicates an expected call of UpdateClusterAutoDiagnosticConfig.
func (mr *MockServiceInterfaceMockRecorder) UpdateClusterAutoDiagnosticConfig(ctx, id, params, orgID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterAutoDiagnosticConfig", reflect.TypeOf((*MockServiceInterface)(nil).UpdateClusterAutoDiagnosticConfig), ctx, id, params, orgID)
}

// UpdateDatabase mocks base method.
func (m *MockServiceInterface) UpdateDatabase(ctx context.Context, id int32, params apigen.DatabaseConnectInfo, orgID int32) (*apigen.Database, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDatabase", ctx, id, params, orgID)
	ret0, _ := ret[0].(*apigen.Database)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDatabase indicates an expected call of UpdateDatabase.
func (mr *MockServiceInterfaceMockRecorder) UpdateDatabase(ctx, id, params, orgID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDatabase", reflect.TypeOf((*MockServiceInterface)(nil).UpdateDatabase), ctx, id, params, orgID)
}

// UpdateMetricsStore mocks base method.
func (m *MockServiceInterface) UpdateMetricsStore(ctx context.Context, id int32, req apigen.MetricsStoreImport, organizationID int32) (*apigen.MetricsStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetricsStore", ctx, id, req, organizationID)
	ret0, _ := ret[0].(*apigen.MetricsStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetricsStore indicates an expected call of UpdateMetricsStore.
func (mr *MockServiceInterfaceMockRecorder) UpdateMetricsStore(ctx, id, req, organizationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetricsStore", reflect.TypeOf((*MockServiceInterface)(nil).UpdateMetricsStore), ctx, id, req, organizationID)
}
