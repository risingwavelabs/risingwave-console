// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: snapshots.sql

package querier

import (
	"context"
)

const createSnapshot = `-- name: CreateSnapshot :exec
INSERT INTO snapshots (cluster_id, snapshot_id)
VALUES ($1, $2)
`

type CreateSnapshotParams struct {
	ClusterID  int32
	SnapshotID int64
}

func (q *Queries) CreateSnapshot(ctx context.Context, arg CreateSnapshotParams) error {
	_, err := q.db.Exec(ctx, createSnapshot, arg.ClusterID, arg.SnapshotID)
	return err
}

const deleteSnapshot = `-- name: DeleteSnapshot :exec
DELETE FROM snapshots
WHERE cluster_id = $1 AND snapshot_id = $2
`

type DeleteSnapshotParams struct {
	ClusterID  int32
	SnapshotID int64
}

func (q *Queries) DeleteSnapshot(ctx context.Context, arg DeleteSnapshotParams) error {
	_, err := q.db.Exec(ctx, deleteSnapshot, arg.ClusterID, arg.SnapshotID)
	return err
}

const listSnapshots = `-- name: ListSnapshots :many
SELECT cluster_id, snapshot_id, created_at FROM snapshots
WHERE cluster_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListSnapshots(ctx context.Context, clusterID int32) ([]*Snapshot, error) {
	rows, err := q.db.Query(ctx, listSnapshots, clusterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Snapshot
	for rows.Next() {
		var i Snapshot
		if err := rows.Scan(&i.ClusterID, &i.SnapshotID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
