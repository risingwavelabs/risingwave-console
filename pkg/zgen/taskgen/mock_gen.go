// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/zgen/taskgen/taskgen_gen.go
//
// Generated by this command:
//
//	mockgen -source pkg/zgen/taskgen/taskgen_gen.go -destination pkg/zgen/taskgen/mock_gen.go -package taskgen
//

// Package taskgen is a generated GoMock package.
package taskgen

import (
	context "context"
	reflect "reflect"

	taskcore "github.com/cloudcarver/anchor/pkg/taskcore"
	pgx "github.com/jackc/pgx/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockTaskRunner is a mock of TaskRunner interface.
type MockTaskRunner struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRunnerMockRecorder
	isgomock struct{}
}

// MockTaskRunnerMockRecorder is the mock recorder for MockTaskRunner.
type MockTaskRunnerMockRecorder struct {
	mock *MockTaskRunner
}

// NewMockTaskRunner creates a new mock instance.
func NewMockTaskRunner(ctrl *gomock.Controller) *MockTaskRunner {
	mock := &MockTaskRunner{ctrl: ctrl}
	mock.recorder = &MockTaskRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskRunner) EXPECT() *MockTaskRunnerMockRecorder {
	return m.recorder
}

// RunAutoBackup mocks base method.
func (m *MockTaskRunner) RunAutoBackup(ctx context.Context, params *AutoBackupParameters, overrides ...taskcore.TaskOverride) (int32, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range overrides {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunAutoBackup", varargs...)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunAutoBackup indicates an expected call of RunAutoBackup.
func (mr *MockTaskRunnerMockRecorder) RunAutoBackup(ctx, params any, overrides ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, overrides...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunAutoBackup", reflect.TypeOf((*MockTaskRunner)(nil).RunAutoBackup), varargs...)
}

// RunAutoBackupWithTx mocks base method.
func (m *MockTaskRunner) RunAutoBackupWithTx(ctx context.Context, tx pgx.Tx, params *AutoBackupParameters, overrides ...taskcore.TaskOverride) (int32, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, tx, params}
	for _, a := range overrides {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunAutoBackupWithTx", varargs...)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunAutoBackupWithTx indicates an expected call of RunAutoBackupWithTx.
func (mr *MockTaskRunnerMockRecorder) RunAutoBackupWithTx(ctx, tx, params any, overrides ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, tx, params}, overrides...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunAutoBackupWithTx", reflect.TypeOf((*MockTaskRunner)(nil).RunAutoBackupWithTx), varargs...)
}

// RunAutoDiagnostic mocks base method.
func (m *MockTaskRunner) RunAutoDiagnostic(ctx context.Context, params *AutoDiagnosticParameters, overrides ...taskcore.TaskOverride) (int32, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range overrides {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunAutoDiagnostic", varargs...)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunAutoDiagnostic indicates an expected call of RunAutoDiagnostic.
func (mr *MockTaskRunnerMockRecorder) RunAutoDiagnostic(ctx, params any, overrides ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, overrides...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunAutoDiagnostic", reflect.TypeOf((*MockTaskRunner)(nil).RunAutoDiagnostic), varargs...)
}

// RunAutoDiagnosticWithTx mocks base method.
func (m *MockTaskRunner) RunAutoDiagnosticWithTx(ctx context.Context, tx pgx.Tx, params *AutoDiagnosticParameters, overrides ...taskcore.TaskOverride) (int32, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, tx, params}
	for _, a := range overrides {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunAutoDiagnosticWithTx", varargs...)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunAutoDiagnosticWithTx indicates an expected call of RunAutoDiagnosticWithTx.
func (mr *MockTaskRunnerMockRecorder) RunAutoDiagnosticWithTx(ctx, tx, params any, overrides ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, tx, params}, overrides...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunAutoDiagnosticWithTx", reflect.TypeOf((*MockTaskRunner)(nil).RunAutoDiagnosticWithTx), varargs...)
}

// RunDeleteClusterDiagnostic mocks base method.
func (m *MockTaskRunner) RunDeleteClusterDiagnostic(ctx context.Context, params *DeleteClusterDiagnosticParameters, overrides ...taskcore.TaskOverride) (int32, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range overrides {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunDeleteClusterDiagnostic", varargs...)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunDeleteClusterDiagnostic indicates an expected call of RunDeleteClusterDiagnostic.
func (mr *MockTaskRunnerMockRecorder) RunDeleteClusterDiagnostic(ctx, params any, overrides ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, overrides...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunDeleteClusterDiagnostic", reflect.TypeOf((*MockTaskRunner)(nil).RunDeleteClusterDiagnostic), varargs...)
}

// RunDeleteClusterDiagnosticWithTx mocks base method.
func (m *MockTaskRunner) RunDeleteClusterDiagnosticWithTx(ctx context.Context, tx pgx.Tx, params *DeleteClusterDiagnosticParameters, overrides ...taskcore.TaskOverride) (int32, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, tx, params}
	for _, a := range overrides {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunDeleteClusterDiagnosticWithTx", varargs...)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunDeleteClusterDiagnosticWithTx indicates an expected call of RunDeleteClusterDiagnosticWithTx.
func (mr *MockTaskRunnerMockRecorder) RunDeleteClusterDiagnosticWithTx(ctx, tx, params any, overrides ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, tx, params}, overrides...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunDeleteClusterDiagnosticWithTx", reflect.TypeOf((*MockTaskRunner)(nil).RunDeleteClusterDiagnosticWithTx), varargs...)
}

// RunDeleteSnapshot mocks base method.
func (m *MockTaskRunner) RunDeleteSnapshot(ctx context.Context, params *DeleteSnapshotParameters, overrides ...taskcore.TaskOverride) (int32, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range overrides {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunDeleteSnapshot", varargs...)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunDeleteSnapshot indicates an expected call of RunDeleteSnapshot.
func (mr *MockTaskRunnerMockRecorder) RunDeleteSnapshot(ctx, params any, overrides ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, overrides...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunDeleteSnapshot", reflect.TypeOf((*MockTaskRunner)(nil).RunDeleteSnapshot), varargs...)
}

// RunDeleteSnapshotWithTx mocks base method.
func (m *MockTaskRunner) RunDeleteSnapshotWithTx(ctx context.Context, tx pgx.Tx, params *DeleteSnapshotParameters, overrides ...taskcore.TaskOverride) (int32, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, tx, params}
	for _, a := range overrides {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunDeleteSnapshotWithTx", varargs...)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunDeleteSnapshotWithTx indicates an expected call of RunDeleteSnapshotWithTx.
func (mr *MockTaskRunnerMockRecorder) RunDeleteSnapshotWithTx(ctx, tx, params any, overrides ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, tx, params}, overrides...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunDeleteSnapshotWithTx", reflect.TypeOf((*MockTaskRunner)(nil).RunDeleteSnapshotWithTx), varargs...)
}

// MockExecutorInterface is a mock of ExecutorInterface interface.
type MockExecutorInterface struct {
	ctrl     *gomock.Controller
	recorder *MockExecutorInterfaceMockRecorder
	isgomock struct{}
}

// MockExecutorInterfaceMockRecorder is the mock recorder for MockExecutorInterface.
type MockExecutorInterfaceMockRecorder struct {
	mock *MockExecutorInterface
}

// NewMockExecutorInterface creates a new mock instance.
func NewMockExecutorInterface(ctrl *gomock.Controller) *MockExecutorInterface {
	mock := &MockExecutorInterface{ctrl: ctrl}
	mock.recorder = &MockExecutorInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutorInterface) EXPECT() *MockExecutorInterfaceMockRecorder {
	return m.recorder
}

// ExecuteAutoBackup mocks base method.
func (m *MockExecutorInterface) ExecuteAutoBackup(ctx context.Context, params *AutoBackupParameters) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteAutoBackup", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteAutoBackup indicates an expected call of ExecuteAutoBackup.
func (mr *MockExecutorInterfaceMockRecorder) ExecuteAutoBackup(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAutoBackup", reflect.TypeOf((*MockExecutorInterface)(nil).ExecuteAutoBackup), ctx, params)
}

// ExecuteAutoDiagnostic mocks base method.
func (m *MockExecutorInterface) ExecuteAutoDiagnostic(ctx context.Context, params *AutoDiagnosticParameters) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteAutoDiagnostic", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteAutoDiagnostic indicates an expected call of ExecuteAutoDiagnostic.
func (mr *MockExecutorInterfaceMockRecorder) ExecuteAutoDiagnostic(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAutoDiagnostic", reflect.TypeOf((*MockExecutorInterface)(nil).ExecuteAutoDiagnostic), ctx, params)
}

// ExecuteDeleteClusterDiagnostic mocks base method.
func (m *MockExecutorInterface) ExecuteDeleteClusterDiagnostic(ctx context.Context, params *DeleteClusterDiagnosticParameters) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteDeleteClusterDiagnostic", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteDeleteClusterDiagnostic indicates an expected call of ExecuteDeleteClusterDiagnostic.
func (mr *MockExecutorInterfaceMockRecorder) ExecuteDeleteClusterDiagnostic(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteDeleteClusterDiagnostic", reflect.TypeOf((*MockExecutorInterface)(nil).ExecuteDeleteClusterDiagnostic), ctx, params)
}

// ExecuteDeleteSnapshot mocks base method.
func (m *MockExecutorInterface) ExecuteDeleteSnapshot(ctx context.Context, params *DeleteSnapshotParameters) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteDeleteSnapshot", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteDeleteSnapshot indicates an expected call of ExecuteDeleteSnapshot.
func (mr *MockExecutorInterfaceMockRecorder) ExecuteDeleteSnapshot(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteDeleteSnapshot", reflect.TypeOf((*MockExecutorInterface)(nil).ExecuteDeleteSnapshot), ctx, params)
}
