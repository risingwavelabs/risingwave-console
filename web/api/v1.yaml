openapi: 3.0.0

info:
  title: AI Agent API
  version: '1.0'
  description: API for interacting with AI models and managing settings

servers:
  - url: /api/v1
    description: Base API path

paths:
  /databases:
    get:
      summary: List all databases
      description: Retrieve a list of all databases and their tables
      operationId: listDatabases
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successfully retrieved database list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Database'
    post:
      summary: Create a new database
      description: Create a new database
      operationId: createDatabase
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabaseConnectInfo'
      responses:
        '201':
          description: Database created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Database'

  /databases/test-connection:
    post:
      summary: Test database connection
      description: Test a database connection
      operationId: testDatabaseConnection
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestConnectionPayload'
      responses:
        '200':
          description: Successfully tested database connection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestConnectionResult'

  /databases/{ID}:
    parameters:
      - name: ID
        in: path
        required: true
        schema:
          type: integer
          format: int32
    get:
      summary: Get database details
      description: Retrieve details of a specific database
      operationId: getDatabase
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successfully retrieved database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Database'
    put:
      summary: Update database
      description: Update a specific database
      operationId: updateDatabase
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabaseConnectInfo'
      responses:
        '200':
          description: Database updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Database'
    delete:
      summary: Delete database
      description: Delete a specific database
      operationId: deleteDatabase
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Database deleted successfully

  /databases/{ID}/query:
    post:
      parameters:
        - name: ID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      summary: Query database
      description: Query a specific database
      operationId: queryDatabase
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      responses:
        '200':
          description: Query executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'

  /databases/{ID}/ddl-progress:
    get:
      parameters:
        - name: ID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      summary: Get DDL progress
      description: Get the progress of a DDL operation
      operationId: get DDL progress
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successfully retrieved DDL progress
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DDLProgress'
    
  /databases/{ID}/ddl-progress/{ddlID}/cancel:
    post:
      operationId: cancelDDLProgress
      parameters:
        - name: ID
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: ddlID
          in: path
          required: true
          schema:
            type: string
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successfully canceled DDL operation

  /clusters:
    get:
      summary: List all clusters
      description: Retrieve a list of all database clusters
      operationId: listClusters
      responses:
        '200':
          description: Successfully retrieved cluster list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cluster'
      security:
        - BearerAuth: []

    post:
      summary: Create a new cluster
      description: Create a new database cluster
      operationId: createCluster
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClusterCreate'
      responses:
        '201':
          description: Cluster created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cluster'

      security:
        - BearerAuth: []

  /clusters/{ID}:
    parameters:
      - name: ID
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Get cluster details
      description: Retrieve details of a specific cluster
      operationId: getCluster
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successfully retrieved cluster
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cluster'
    security:
        - BearerAuth: []

    put:
      summary: Update cluster
      description: Update a specific cluster
      operationId: updateCluster
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateClusterRequest'
      responses:
        '200':
          description: Cluster updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cluster'
      security:
        - BearerAuth: []

    delete:
      summary: Delete cluster
      description: Delete a specific cluster
      operationId: deleteCluster
      security:
        - BearerAuth: []
      parameters:
        - name: cascade
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '204':
          description: Cluster deleted successfully

  /clusters/{ID}/snapshots:
    parameters:
      - name: ID
        in: path
        required: true
        schema:
          type: string
    get:
      summary: List cluster snapshots
      description: Retrieve a list of all snapshots for a specific cluster
      operationId: listClusterSnapshots
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successfully retrieved snapshot list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Snapshot'
    post:
      summary: Create a new snapshot
      description: Create a new metadata snapshot for a specific cluster
      operationId: createClusterSnapshot
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SnapshotCreate'
      responses:
        '201':
          description: Snapshot created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Snapshot'

  /clusters/{ID}/snapshots/{snapshotId}:
    parameters:
      - name: ID
        in: path
        required: true
        schema:
          type: string
      - name: snapshotId
        in: path
        required: true
        schema:
          type: string
    delete:
      summary: Delete snapshot
      description: Delete a specific snapshot
      operationId: deleteClusterSnapshot
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Snapshot deleted successfully
    post:
      summary: Restore snapshot
      description: Restore cluster metadata from a specific snapshot
      operationId: restoreClusterSnapshot
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Snapshot restored successfully

  /clusters/{ID}/snapshot-config:
    parameters:
      - name: ID
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Get snapshot configuration
      description: Get automatic snapshot configuration for a cluster
      operationId: getClusterSnapshotConfig
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successfully retrieved snapshot configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotConfig'
    put:
      summary: Update snapshot configuration
      description: Update automatic snapshot configuration for a cluster
      operationId: updateClusterSnapshotConfig
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SnapshotConfig'
      responses:
        '200':
          description: Snapshot configuration updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotConfig'

  /clusters/{ID}/diagnostics:
    parameters:
      - name: ID
        in: path
        required: true
        schema:
          type: string
    get:
      summary: List diagnostic data
      description: Retrieve diagnostic data for a specific cluster with optional date range filtering
      operationId: listClusterDiagnostics
      security:
        - BearerAuth: []
      parameters:
        - name: from
          in: query
          required: false
          schema:
            type: string
            format: date-time
          description: Start date for filtering diagnostic data
        - name: to
          in: query
          required: false
          schema:
            type: string
            format: date-time
          description: End date for filtering diagnostic data
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - name: perPage
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of items per page
      responses:
        '200':
          description: Successfully retrieved diagnostic data
          content:
            application/json:
              schema:
                type: object
                required:
                  - items
                  - total
                  - page
                  - perPage
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/DiagnosticData'
                  total:
                    type: integer
                    description: Total number of diagnostic entries
                  page:
                    type: integer
                    description: Current page number
                  perPage:
                    type: integer
                    description: Number of items per page

  /clusters/{ID}/diagnostics/config:
    parameters:
      - name: ID
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Get diagnostic configuration
      description: Get diagnostic data collection configuration for a cluster
      operationId: getClusterDiagnosticConfig
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successfully retrieved diagnostic configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiagnosticConfig'
    put:
      summary: Update diagnostic configuration
      description: Update diagnostic data collection configuration for a cluster
      operationId: updateClusterDiagnosticConfig
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiagnosticConfig'
      responses:
        '200':
          description: Diagnostic configuration updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiagnosticConfig'

  /auth/sign-in:
    post:
      summary: Sign in user
      description: Authenticate user and return access token
      operationId: signIn
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInRequest'
      responses:
        '200':
          description: Successfully authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credentials'
        '401':
          description: Invalid credentials

  /auth/refresh:
    post:
      summary: Refresh access token
      description: Get a new access token using a refresh token
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Successfully refreshed token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credentials'
        '401':
          description: Invalid or expired refresh token

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    DatabaseConnectInfo:
      type: object
      required:
        - name
        - clusterID
        - username
        - database
      properties:
        name:
          type: string
          description: Name of the database
        clusterID:
          type: integer
          format: int32
          description: ID of the cluster this database belongs to
        username:
          type: string
          description: Database username
        password:
          type: string
          description: Database password (optional)
          format: password
        database:
          type: string
          description: Database name

    Database:
      type: object
      required:
        - ID
        - name
        - clusterID
        - organizationID
        - username
        - database
        - createdAt
        - updatedAt
      properties:
        ID:
          type: integer
          format: int32
          description: Unique identifier of the database
        name:
          type: string
          description: Name of the database
        clusterID:
          type: integer
          format: int32
          description: ID of the cluster this database belongs to
        organizationID:
          type: integer
          format: int32
          description: ID of the organization this database belongs to
        username:
          type: string
          description: Database username
        database:
          type: string
          description: Database name
        password:
          type: string
          format: password
          description: Database password (optional)
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
        schemas:
          type: array
          items:
            $ref: '#/components/schemas/Schema'
          description: List of schemas in the database

    Column:
      type: object
      required:
        - name
        - type
        - isPrimaryKey
        - isHidden
      properties:
        name:
          type: string
          description: Name of the column
        type:
          type: string
          description: Data type of the column
        isPrimaryKey:
          type: boolean
          description: Whether the column is a primary key
        isHidden:
          type: boolean
          description: Whether the column is hidden

    Schema:
      type: object
      required:
        - name
        - relations
      properties:
        name:
          type: string
          description: Name of the schema
        relations:
          type: array
          items:
            $ref: '#/components/schemas/Relation'

    Relation:
      type: object
      required:
        - ID
        - name
        - type
        - columns
        - dependencies
      properties:
        ID:
          type: integer
          format: int32
          description: Unique identifier of the table
        name:
          type: string
          description: Name of the table
        type:
          type: string
          enum: ['table', 'source', 'sink', 'materializedView', "system table"]
          description: Type of the relation
        columns:
          type: array
          items:
            $ref: '#/components/schemas/Column'
          description: List of columns in the table
        dependencies:
          type: array
          items:
            type: integer
            format: int32
            description: ID of the relation this relation depends on

    ClusterCreate:
      type: object
      required:
        - name
        - host
        - sqlPort
        - metaPort
      properties:
        name:
          type: string
          description: Name of the cluster
        host:
          type: string
          description: Cluster host address
        sqlPort:
          type: integer
          description: SQL connection port
        metaPort:
          type: integer
          description: Metadata node port

    Cluster:
      type: object
      required:
        - ID
        - organizationID
        - name
        - host
        - sqlPort
        - metaPort
        - createdAt
        - updatedAt
      properties:
        ID:
          type: integer
          format: int32
        organizationID:
          type: integer
          format: int32
        name:
          type: string
        host:
          type: string
        sqlPort:
          type: integer
          format: int32
        metaPort:
          type: integer
          format: int32
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    UpdateClusterRequest:
      type: object
      required:
        - name
        - host
        - sqlPort
        - metaPort
      properties:
        name:
          type: string
        host:
          type: string
        sqlPort:
          type: integer
          format: int32
        metaPort:
          type: integer
          format: int32

    SnapshotCreate:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Name of the snapshot

    Snapshot:
      type: object
      required:
        - ID
        - name
        - createdAt
      properties:
        ID:
          type: string
          description: Unique identifier of the snapshot
        name:
          type: string
          description: Name of the snapshot
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp of the snapshot

    SnapshotConfig:
      type: object
      required:
        - enabled
        - interval
        - keepCount
      properties:
        enabled:
          type: boolean
          description: Whether automatic snapshots are enabled
        interval:
          type: string
          description: Interval between automatic snapshots (e.g., '30m', '6h', '12h', '24h')
        keepCount:
          type: integer
          description: Number of automatic snapshots to retain
          minimum: 1

    DiagnosticConfig:
      type: object
      required:
        - interval
        - expiration
        - noExpiration
      properties:
        interval:
          type: string
          description: Interval between diagnostic data collections (e.g., '15m', '30m', '1h', '6h', '12h', '24h')
        expiration:
          type: string
          description: How long to retain diagnostic data (e.g., '1d', '7d', '14d', '30d', '90d')
        noExpiration:
          type: boolean
          description: Whether to keep diagnostic data indefinitely

    DiagnosticData:
      type: object
      required:
        - ID
        - timestamp
        - data
      properties:
        ID:
          type: integer
          description: Unique identifier of the diagnostic entry
        timestamp:
          type: string
          format: date-time
          description: When the diagnostic data was collected
        data:
          type: string
          description: Raw diagnostic data message containing system metrics and information

    SignInRequest:
      type: object
      required:
        - name
        - password
      properties:
        name:
          type: string
          description: User's name
        password:
          type: string
          format: password
          description: User's password

    Credentials:
      type: object
      required:
        - accessToken
        - refreshToken
        - tokenType
      properties:
        accessToken:
          type: string
          description: JWT access token
        refreshToken:
          type: string
          description: JWT refresh token for obtaining new access tokens
        tokenType:
          type: string
          enum: ['Bearer']
          description: Token type

    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          description: Refresh token obtained from sign-in

    User:
      type: object
      required:
        - ID
        - name
        - organizationID
        - createdAt
        - updatedAt
      properties:
        ID:
          type: integer
          format: int32
          description: Unique identifier of the user
        name:
          type: string
          description: User's name
        organizationID:
          type: integer
          format: int32
          description: ID of the organization this user belongs to
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp

    QueryRequest:
      type: object
      required:
        - query
      properties:
        query:
          type: string
          description: SQL query to execute
        backgroundDDL:
          type: boolean
          description: Whether to execute the query in background DDL mode
          default: false

    QueryResponse:
      type: object
      required:
        - columns
        - rows
        - rowsAffected
      properties:
        columns:
          type: array
          items:
            $ref: '#/components/schemas/Column'
        rows:
          type: array
          items:
            type: object
            description: Row of the query result, the key is the column name and the value is the column value
        rowsAffected:
          type: integer
          format: int32
          description: Number of rows affected by the query
        error:
          type: string
          description: Error message if the query failed

    DDLProgress:
      type: object
      required: [ID, statement, progress, initializedAt]
      properties:
        ID:
          type: integer
          format: int64
        statement:
          type: string
        progress:
          type: string
          description: Progress of the materialized view creation
        initializedAt:
          type: string
          format: date-time
          description: When the DDL operation was initialized

    TestConnectionPayload:
      type: object
      required:
        - clusterID
        - username
        - database
      properties:
        clusterID:
          type: integer
          format: int32
        username:
          type: string
        password:
          type: string
        database:
          type: string

    TestConnectionResult:
      type: object
      required:
        - result
        - success
      properties:
        success:
          type: boolean
          description: Whether the database connection was successful
        result:
          type: string
          description: Test result
