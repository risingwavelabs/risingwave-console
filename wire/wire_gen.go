// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/cloudcarver/anchor/wire"
	"github.com/risingwavelabs/risingwave-console/pkg"
	"github.com/risingwavelabs/risingwave-console/pkg/config"
	"github.com/risingwavelabs/risingwave-console/pkg/conn/http"
	"github.com/risingwavelabs/risingwave-console/pkg/conn/meta"
	"github.com/risingwavelabs/risingwave-console/pkg/conn/metricsstore"
	"github.com/risingwavelabs/risingwave-console/pkg/conn/sql"
	"github.com/risingwavelabs/risingwave-console/pkg/controller"
	"github.com/risingwavelabs/risingwave-console/pkg/service"
	"github.com/risingwavelabs/risingwave-console/pkg/task"
	"github.com/risingwavelabs/risingwave-console/pkg/zcore/injection"
	"github.com/risingwavelabs/risingwave-console/pkg/zcore/model"
	"github.com/risingwavelabs/risingwave-console/pkg/zgen/taskgen"
)

// Injectors from wire.go:

func InitializeApplication() (*pkg.App, error) {
	application, err := wire.InitializeApplication()
	if err != nil {
		return nil, err
	}
	configConfig, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	modelInterface, err := model.NewModel(configConfig)
	if err != nil {
		return nil, err
	}
	authInterface := injection.InjectAuth(application)
	sqlConnectionManegerInterface := sql.NewSQLConnectionManager(modelInterface)
	risectlManagerInterface, err := meta.NewRisectlManager(configConfig)
	if err != nil {
		return nil, err
	}
	metricsManager, err := metricsstore.NewMetricsManager(modelInterface, configConfig)
	if err != nil {
		return nil, err
	}
	metaHttpManagerInterface := http.NewMetaHttpManager()
	taskStoreInterface := injection.InjectTaskStore(application)
	taskRunner := taskgen.NewTaskRunner(taskStoreInterface)
	serviceInterface := injection.InjectAnchorSvc(application)
	serviceServiceInterface, err := service.NewService(configConfig, modelInterface, authInterface, sqlConnectionManegerInterface, risectlManagerInterface, metricsManager, metaHttpManagerInterface, taskRunner, taskStoreInterface, serviceInterface)
	if err != nil {
		return nil, err
	}
	serverInterface := controller.NewSeverInterface(serviceServiceInterface, authInterface)
	validator := controller.NewValidator(modelInterface, authInterface)
	executorInterface := task.NewTaskExecutor(taskRunner, modelInterface, risectlManagerInterface, metaHttpManagerInterface)
	taskHandler := taskgen.NewTaskHandler(executorInterface)
	plugin := pkg.NewPlugin(serverInterface, validator, taskHandler)
	initService := service.NewInitService(modelInterface, serviceInterface)
	app, err := pkg.NewApp(application, configConfig, plugin, initService)
	if err != nil {
		return nil, err
	}
	return app, nil
}
